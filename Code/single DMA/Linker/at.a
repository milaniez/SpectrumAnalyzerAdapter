;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/23/2013
;Author  : MzZ
;Company : MzZ
;Comments:
;
;
;Chip type               : ATxmega128A1
;Program type            : Application
;AVR Core Clock frequency: 32.000000 MHz
;Memory model            : Small
;Data Stack size         : 2048
;*****************************************************/
;
;// I/O Registers definitions
;#include <io.h>
;
;// Delay functions
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <math.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;// Declare your global variables here
;
;// System Clocks initialization
;void system_clocks_init(void)
; 0000 0028 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0000 0029 unsigned char n,s;
; 0000 002A 
; 0000 002B // Optimize for speed
; 0000 002C #pragma optsize-
; 0000 002D // Save interrupts enabled/disabled state
; 0000 002E s=SREG;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;	n -> R17
;	s -> R16
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
; 0000 002F // Disable interrupts
; 0000 0030 #asm("cli")
;PCODE: $00000006 VOL: 0
	cli
;PCODE: $00000007 VOL: 0
; 0000 0031 
; 0000 0032 // External 16000.000 kHz oscillator initialization
; 0000 0033 OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 1
; 0000 0034 // Enable the external oscillator
; 0000 0035 OSC.CTRL|=OSC_XOSCEN_bm;
;PCODE: $0000000A VOL: 1
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 1
; 0000 0036 
; 0000 0037 // Wait for the external oscillator to stabilize
; 0000 0038 while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 1
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0039 
; 0000 003A // PLL initialization
; 0000 003B // PLL clock cource: External Osc. or Clock
; 0000 003C // PLL multiplication factor: 2
; 0000 003D // PLL frequency: 32.000000 MHz
; 0000 003E // Set the PLL clock source and multiplication factor
; 0000 003F n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |
; 0000 0040 	OSC_PLLSRC_XOSC_gc | 2;
;PCODE: $00000013 VOL: 1
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0041 CCP=CCP_IOREG_gc;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0042 OSC.PLLCTRL=n;
;PCODE: $00000019 VOL: 1
;PCODE: $0000001A VOL: 0
; 0000 0043 // Enable the PLL
; 0000 0044 OSC.CTRL|=OSC_PLLEN_bm;
;PCODE: $0000001B VOL: 1
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 1
; 0000 0045 
; 0000 0046 // System Clock prescaler A division factor: 1
; 0000 0047 // System Clock prescalers B & C division factors: B:1, C:1
; 0000 0048 // ClkPer4: 32000.000 kHz
; 0000 0049 // ClkPer2: 32000.000 kHz
; 0000 004A // ClkPer:  32000.000 kHz
; 0000 004B // ClkCPU:  32000.000 kHz
; 0000 004C n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
; 0000 004D 	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
;PCODE: $0000001E VOL: 1
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004E CCP=CCP_IOREG_gc;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004F CLK.PSCTRL=n;
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
; 0000 0050 
; 0000 0051 // Wait for the PLL to stabilize
; 0000 0052 while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 1
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0053 
; 0000 0054 // Select the system clock source: Phase Locked Loop
; 0000 0055 n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
;PCODE: $0000002D VOL: 1
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0056 CCP=CCP_IOREG_gc;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0057 CLK.CTRL=n;
;PCODE: $00000033 VOL: 1
;PCODE: $00000034 VOL: 0
; 0000 0058 
; 0000 0059 // Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
; 0000 005A OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
;PCODE: $00000035 VOL: 1
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
; 0000 005B 
; 0000 005C // Peripheral Clock output: Disabled
; 0000 005D PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
;PCODE: $00000038 VOL: 1
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 1
; 0000 005E 
; 0000 005F // Restore interrupts enabled/disabled state
; 0000 0060 SREG=s;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0061 // Restore optimization for size if needed
; 0000 0062 #pragma optsize_default
; 0000 0063 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;// Ports initialization
;void ports_init(void)
; 0000 0067 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0068 // PORTA initialization
; 0000 0069 // OUT register
; 0000 006A PORTA.OUT=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
; 0000 006B // Bit0: Input
; 0000 006C // Bit1: Input
; 0000 006D // Bit2: Input
; 0000 006E // Bit3: Input
; 0000 006F // Bit4: Input
; 0000 0070 // Bit5: Input
; 0000 0071 // Bit6: Input
; 0000 0072 // Bit7: Input
; 0000 0073 PORTA.DIR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 1
; 0000 0074 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0075 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0076 // Bit0 inverted: Off
; 0000 0077 // Bit0 slew rate limitation: Off
; 0000 0078 PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
; 0000 0079 // Bit1 Output/Pull configuration: Totempole/No
; 0000 007A // Bit1 Input/Sense configuration: Sense both edges
; 0000 007B // Bit1 inverted: Off
; 0000 007C // Bit1 slew rate limitation: Off
; 0000 007D PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 1
; 0000 007E // Bit2 Output/Pull configuration: Totempole/No
; 0000 007F // Bit2 Input/Sense configuration: Sense both edges
; 0000 0080 // Bit2 inverted: Off
; 0000 0081 // Bit2 slew rate limitation: Off
; 0000 0082 PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 1
; 0000 0083 // Bit3 Output/Pull configuration: Totempole/No
; 0000 0084 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0085 // Bit3 inverted: Off
; 0000 0086 // Bit3 slew rate limitation: Off
; 0000 0087 PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 1
; 0000 0088 // Bit4 Output/Pull configuration: Totempole/No
; 0000 0089 // Bit4 Input/Sense configuration: Sense both edges
; 0000 008A // Bit4 inverted: Off
; 0000 008B // Bit4 slew rate limitation: Off
; 0000 008C PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 1
; 0000 008D // Bit5 Output/Pull configuration: Totempole/No
; 0000 008E // Bit5 Input/Sense configuration: Sense both edges
; 0000 008F // Bit5 inverted: Off
; 0000 0090 // Bit5 slew rate limitation: Off
; 0000 0091 PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 1
; 0000 0092 // Bit6 Output/Pull configuration: Totempole/No
; 0000 0093 // Bit6 Input/Sense configuration: Sense both edges
; 0000 0094 // Bit6 inverted: Off
; 0000 0095 // Bit6 slew rate limitation: Off
; 0000 0096 PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 1
; 0000 0097 // Bit7 Output/Pull configuration: Totempole/No
; 0000 0098 // Bit7 Input/Sense configuration: Sense both edges
; 0000 0099 // Bit7 inverted: Off
; 0000 009A // Bit7 slew rate limitation: Off
; 0000 009B PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 1
; 0000 009C // Interrupt 0 level: Disabled
; 0000 009D // Interrupt 1 level: Disabled
; 0000 009E PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 009F 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000057 VOL: 1
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 1
; 0000 00A0 // Bit0 pin change interrupt 0: Off
; 0000 00A1 // Bit1 pin change interrupt 0: Off
; 0000 00A2 // Bit2 pin change interrupt 0: Off
; 0000 00A3 // Bit3 pin change interrupt 0: Off
; 0000 00A4 // Bit4 pin change interrupt 0: Off
; 0000 00A5 // Bit5 pin change interrupt 0: Off
; 0000 00A6 // Bit6 pin change interrupt 0: Off
; 0000 00A7 // Bit7 pin change interrupt 0: Off
; 0000 00A8 PORTA.INT0MASK=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 1
; 0000 00A9 // Bit0 pin change interrupt 1: Off
; 0000 00AA // Bit1 pin change interrupt 1: Off
; 0000 00AB // Bit2 pin change interrupt 1: Off
; 0000 00AC // Bit3 pin change interrupt 1: Off
; 0000 00AD // Bit4 pin change interrupt 1: Off
; 0000 00AE // Bit5 pin change interrupt 1: Off
; 0000 00AF // Bit6 pin change interrupt 1: Off
; 0000 00B0 // Bit7 pin change interrupt 1: Off
; 0000 00B1 PORTA.INT1MASK=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 1
; 0000 00B2 
; 0000 00B3 // PORTB initialization
; 0000 00B4 // OUT register
; 0000 00B5 PORTB.OUT=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 1
; 0000 00B6 // Bit0: Input
; 0000 00B7 // Bit1: Input
; 0000 00B8 // Bit2: Input
; 0000 00B9 // Bit3: Input
; 0000 00BA // Bit4: Input
; 0000 00BB // Bit5: Input
; 0000 00BC // Bit6: Input
; 0000 00BD // Bit7: Input
; 0000 00BE PORTB.DIR=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
; 0000 00BF // Bit0 Output/Pull configuration: Totempole/No
; 0000 00C0 // Bit0 Input/Sense configuration: Sense both edges
; 0000 00C1 // Bit0 inverted: Off
; 0000 00C2 // Bit0 slew rate limitation: Off
; 0000 00C3 PORTB.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 1
; 0000 00C4 // Bit1 Output/Pull configuration: Totempole/No
; 0000 00C5 // Bit1 Input/Sense configuration: Sense both edges
; 0000 00C6 // Bit1 inverted: Off
; 0000 00C7 // Bit1 slew rate limitation: Off
; 0000 00C8 PORTB.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 1
; 0000 00C9 // Bit2 Output/Pull configuration: Totempole/No
; 0000 00CA // Bit2 Input/Sense configuration: Sense both edges
; 0000 00CB // Bit2 inverted: Off
; 0000 00CC // Bit2 slew rate limitation: Off
; 0000 00CD PORTB.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 1
; 0000 00CE // Bit3 Output/Pull configuration: Totempole/No
; 0000 00CF // Bit3 Input/Sense configuration: Sense both edges
; 0000 00D0 // Bit3 inverted: Off
; 0000 00D1 // Bit3 slew rate limitation: Off
; 0000 00D2 PORTB.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 00D3 // Bit4 Output/Pull configuration: Totempole/No
; 0000 00D4 // Bit4 Input/Sense configuration: Sense both edges
; 0000 00D5 // Bit4 inverted: Off
; 0000 00D6 // Bit4 slew rate limitation: Off
; 0000 00D7 PORTB.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 1
; 0000 00D8 // Bit5 Output/Pull configuration: Totempole/No
; 0000 00D9 // Bit5 Input/Sense configuration: Sense both edges
; 0000 00DA // Bit5 inverted: Off
; 0000 00DB // Bit5 slew rate limitation: Off
; 0000 00DC PORTB.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 1
; 0000 00DD // Bit6 Output/Pull configuration: Totempole/No
; 0000 00DE // Bit6 Input/Sense configuration: Sense both edges
; 0000 00DF // Bit6 inverted: Off
; 0000 00E0 // Bit6 slew rate limitation: Off
; 0000 00E1 PORTB.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 1
; 0000 00E2 // Bit7 Output/Pull configuration: Totempole/No
; 0000 00E3 // Bit7 Input/Sense configuration: Sense both edges
; 0000 00E4 // Bit7 inverted: Off
; 0000 00E5 // Bit7 slew rate limitation: Off
; 0000 00E6 PORTB.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 1
; 0000 00E7 // Interrupt 0 level: Disabled
; 0000 00E8 // Interrupt 1 level: Disabled
; 0000 00E9 PORTB.INTCTRL=(PORTB.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 00EA 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 1
; 0000 00EB // Bit0 pin change interrupt 0: Off
; 0000 00EC // Bit1 pin change interrupt 0: Off
; 0000 00ED // Bit2 pin change interrupt 0: Off
; 0000 00EE // Bit3 pin change interrupt 0: Off
; 0000 00EF // Bit4 pin change interrupt 0: Off
; 0000 00F0 // Bit5 pin change interrupt 0: Off
; 0000 00F1 // Bit6 pin change interrupt 0: Off
; 0000 00F2 // Bit7 pin change interrupt 0: Off
; 0000 00F3 PORTB.INT0MASK=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
; 0000 00F4 // Bit0 pin change interrupt 1: Off
; 0000 00F5 // Bit1 pin change interrupt 1: Off
; 0000 00F6 // Bit2 pin change interrupt 1: Off
; 0000 00F7 // Bit3 pin change interrupt 1: Off
; 0000 00F8 // Bit4 pin change interrupt 1: Off
; 0000 00F9 // Bit5 pin change interrupt 1: Off
; 0000 00FA // Bit6 pin change interrupt 1: Off
; 0000 00FB // Bit7 pin change interrupt 1: Off
; 0000 00FC PORTB.INT1MASK=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 1
; 0000 00FD 
; 0000 00FE // PORTC initialization
; 0000 00FF // OUT register
; 0000 0100 PORTC.OUT=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 1
; 0000 0101 // Bit0: Input
; 0000 0102 // Bit1: Input
; 0000 0103 // Bit2: Input
; 0000 0104 // Bit3: Input
; 0000 0105 // Bit4: Input
; 0000 0106 // Bit5: Input
; 0000 0107 // Bit6: Input
; 0000 0108 // Bit7: Input
; 0000 0109 PORTC.DIR=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 1
; 0000 010A // Bit0 Output/Pull configuration: Totempole/No
; 0000 010B // Bit0 Input/Sense configuration: Sense both edges
; 0000 010C // Bit0 inverted: Off
; 0000 010D // Bit0 slew rate limitation: Off
; 0000 010E PORTC.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 1
; 0000 010F // Bit1 Output/Pull configuration: Totempole/No
; 0000 0110 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0111 // Bit1 inverted: Off
; 0000 0112 // Bit1 slew rate limitation: Off
; 0000 0113 PORTC.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 1
; 0000 0114 // Bit2 Output/Pull configuration: Totempole/No
; 0000 0115 // Bit2 Input/Sense configuration: Sense both edges
; 0000 0116 // Bit2 inverted: Off
; 0000 0117 // Bit2 slew rate limitation: Off
; 0000 0118 PORTC.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 1
; 0000 0119 // Bit3 Output/Pull configuration: Totempole/No
; 0000 011A // Bit3 Input/Sense configuration: Sense both edges
; 0000 011B // Bit3 inverted: Off
; 0000 011C // Bit3 slew rate limitation: Off
; 0000 011D PORTC.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 1
; 0000 011E // Bit4 Output/Pull configuration: Totempole/No
; 0000 011F // Bit4 Input/Sense configuration: Sense both edges
; 0000 0120 // Bit4 inverted: Off
; 0000 0121 // Bit4 slew rate limitation: Off
; 0000 0122 PORTC.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 1
; 0000 0123 // Bit5 Output/Pull configuration: Totempole/No
; 0000 0124 // Bit5 Input/Sense configuration: Sense both edges
; 0000 0125 // Bit5 inverted: Off
; 0000 0126 // Bit5 slew rate limitation: Off
; 0000 0127 PORTC.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 1
; 0000 0128 // Bit6 Output/Pull configuration: Totempole/No
; 0000 0129 // Bit6 Input/Sense configuration: Sense both edges
; 0000 012A // Bit6 inverted: Off
; 0000 012B // Bit6 slew rate limitation: Off
; 0000 012C PORTC.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 1
; 0000 012D // Bit7 Output/Pull configuration: Totempole/No
; 0000 012E // Bit7 Input/Sense configuration: Sense both edges
; 0000 012F // Bit7 inverted: Off
; 0000 0130 // Bit7 slew rate limitation: Off
; 0000 0131 PORTC.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 1
; 0000 0132 // Interrupt 0 level: Disabled
; 0000 0133 // Interrupt 1 level: Disabled
; 0000 0134 PORTC.INTCTRL=(PORTC.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0135 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000091 VOL: 1
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 1
; 0000 0136 // Bit0 pin change interrupt 0: Off
; 0000 0137 // Bit1 pin change interrupt 0: Off
; 0000 0138 // Bit2 pin change interrupt 0: Off
; 0000 0139 // Bit3 pin change interrupt 0: Off
; 0000 013A // Bit4 pin change interrupt 0: Off
; 0000 013B // Bit5 pin change interrupt 0: Off
; 0000 013C // Bit6 pin change interrupt 0: Off
; 0000 013D // Bit7 pin change interrupt 0: Off
; 0000 013E PORTC.INT0MASK=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 1
; 0000 013F // Bit0 pin change interrupt 1: Off
; 0000 0140 // Bit1 pin change interrupt 1: Off
; 0000 0141 // Bit2 pin change interrupt 1: Off
; 0000 0142 // Bit3 pin change interrupt 1: Off
; 0000 0143 // Bit4 pin change interrupt 1: Off
; 0000 0144 // Bit5 pin change interrupt 1: Off
; 0000 0145 // Bit6 pin change interrupt 1: Off
; 0000 0146 // Bit7 pin change interrupt 1: Off
; 0000 0147 PORTC.INT1MASK=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 1
; 0000 0148 
; 0000 0149 // PORTD initialization
; 0000 014A // OUT register
; 0000 014B PORTD.OUT=0x0F;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 1
; 0000 014C // Bit0: Output
; 0000 014D // Bit1: Output
; 0000 014E // Bit2: Output
; 0000 014F // Bit3: Output
; 0000 0150 // Bit4: Input
; 0000 0151 // Bit5: Input
; 0000 0152 // Bit6: Input
; 0000 0153 // Bit7: Input
; 0000 0154 PORTD.DIR=0x0F;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 1
; 0000 0155 // Bit0 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 0156 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0157 // Bit0 inverted: Off
; 0000 0158 // Bit0 slew rate limitation: Off
; 0000 0159 PORTD.PIN0CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 1
; 0000 015A // Bit1 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 015B // Bit1 Input/Sense configuration: Sense both edges
; 0000 015C // Bit1 inverted: Off
; 0000 015D // Bit1 slew rate limitation: Off
; 0000 015E PORTD.PIN1CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 1
; 0000 015F // Bit2 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 0160 // Bit2 Input/Sense configuration: Sense both edges
; 0000 0161 // Bit2 inverted: Off
; 0000 0162 // Bit2 slew rate limitation: Off
; 0000 0163 PORTD.PIN2CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 1
; 0000 0164 // Bit3 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 0165 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0166 // Bit3 inverted: Off
; 0000 0167 // Bit3 slew rate limitation: Off
; 0000 0168 PORTD.PIN3CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 1
; 0000 0169 // Bit4 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 016A // Bit4 Input/Sense configuration: Sense rising edge
; 0000 016B // Bit4 inverted: Off
; 0000 016C // Bit4 slew rate limitation: Off
; 0000 016D PORTD.PIN4CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 1
; 0000 016E // Bit5 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 016F // Bit5 Input/Sense configuration: Sense rising edge
; 0000 0170 // Bit5 inverted: Off
; 0000 0171 // Bit5 slew rate limitation: Off
; 0000 0172 PORTD.PIN5CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 1
; 0000 0173 // Bit6 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 0174 // Bit6 Input/Sense configuration: Sense rising edge
; 0000 0175 // Bit6 inverted: Off
; 0000 0176 // Bit6 slew rate limitation: Off
; 0000 0177 PORTD.PIN6CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 1
; 0000 0178 // Bit7 Output/Pull configuration: Totempole/Pull-down (on input)
; 0000 0179 // Bit7 Input/Sense configuration: Sense rising edge
; 0000 017A // Bit7 inverted: Off
; 0000 017B // Bit7 slew rate limitation: Off
; 0000 017C PORTD.PIN7CTRL=PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 1
; 0000 017D // Interrupt 0 level: High
; 0000 017E // Interrupt 1 level: Disabled
; 0000 017F PORTD.INTCTRL=(PORTD.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0180 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_HI_gc;
;PCODE: $000000AE VOL: 1
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 1
; 0000 0181 // Bit0 pin change interrupt 0: Off
; 0000 0182 // Bit1 pin change interrupt 0: Off
; 0000 0183 // Bit2 pin change interrupt 0: Off
; 0000 0184 // Bit3 pin change interrupt 0: Off
; 0000 0185 // Bit4 pin change interrupt 0: On
; 0000 0186 // Bit5 pin change interrupt 0: On
; 0000 0187 // Bit6 pin change interrupt 0: On
; 0000 0188 // Bit7 pin change interrupt 0: On
; 0000 0189 PORTD.INT0MASK=0xF0;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 1
; 0000 018A // Bit0 pin change interrupt 1: Off
; 0000 018B // Bit1 pin change interrupt 1: Off
; 0000 018C // Bit2 pin change interrupt 1: Off
; 0000 018D // Bit3 pin change interrupt 1: Off
; 0000 018E // Bit4 pin change interrupt 1: Off
; 0000 018F // Bit5 pin change interrupt 1: Off
; 0000 0190 // Bit6 pin change interrupt 1: Off
; 0000 0191 // Bit7 pin change interrupt 1: Off
; 0000 0192 PORTD.INT1MASK=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 1
; 0000 0193 
; 0000 0194 // PORTE initialization
; 0000 0195 // OUT register
; 0000 0196 PORTE.OUT=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 1
; 0000 0197 // Bit0: Input
; 0000 0198 // Bit1: Input
; 0000 0199 // Bit2: Input
; 0000 019A // Bit3: Input
; 0000 019B // Bit4: Input
; 0000 019C // Bit5: Input
; 0000 019D // Bit6: Input
; 0000 019E // Bit7: Input
; 0000 019F PORTE.DIR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 1
; 0000 01A0 // Bit0 Output/Pull configuration: Totempole/No
; 0000 01A1 // Bit0 Input/Sense configuration: Sense both edges
; 0000 01A2 // Bit0 inverted: Off
; 0000 01A3 // Bit0 slew rate limitation: Off
; 0000 01A4 PORTE.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 1
; 0000 01A5 // Bit1 Output/Pull configuration: Totempole/No
; 0000 01A6 // Bit1 Input/Sense configuration: Sense both edges
; 0000 01A7 // Bit1 inverted: Off
; 0000 01A8 // Bit1 slew rate limitation: Off
; 0000 01A9 PORTE.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 1
; 0000 01AA // Bit2 Output/Pull configuration: Totempole/No
; 0000 01AB // Bit2 Input/Sense configuration: Sense both edges
; 0000 01AC // Bit2 inverted: Off
; 0000 01AD // Bit2 slew rate limitation: Off
; 0000 01AE PORTE.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 1
; 0000 01AF // Bit3 Output/Pull configuration: Totempole/No
; 0000 01B0 // Bit3 Input/Sense configuration: Sense both edges
; 0000 01B1 // Bit3 inverted: Off
; 0000 01B2 // Bit3 slew rate limitation: Off
; 0000 01B3 PORTE.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 1
; 0000 01B4 // Bit4 Output/Pull configuration: Totempole/No
; 0000 01B5 // Bit4 Input/Sense configuration: Sense both edges
; 0000 01B6 // Bit4 inverted: Off
; 0000 01B7 // Bit4 slew rate limitation: Off
; 0000 01B8 PORTE.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 1
; 0000 01B9 // Bit5 Output/Pull configuration: Totempole/No
; 0000 01BA // Bit5 Input/Sense configuration: Sense both edges
; 0000 01BB // Bit5 inverted: Off
; 0000 01BC // Bit5 slew rate limitation: Off
; 0000 01BD PORTE.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 1
; 0000 01BE // Bit6 Output/Pull configuration: Totempole/No
; 0000 01BF // Bit6 Input/Sense configuration: Sense both edges
; 0000 01C0 // Bit6 inverted: Off
; 0000 01C1 // Bit6 slew rate limitation: Off
; 0000 01C2 PORTE.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 1
; 0000 01C3 // Bit7 Output/Pull configuration: Totempole/No
; 0000 01C4 // Bit7 Input/Sense configuration: Sense both edges
; 0000 01C5 // Bit7 inverted: Off
; 0000 01C6 // Bit7 slew rate limitation: Off
; 0000 01C7 PORTE.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 1
; 0000 01C8 // Interrupt 0 level: Disabled
; 0000 01C9 // Interrupt 1 level: Disabled
; 0000 01CA PORTE.INTCTRL=(PORTE.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 01CB 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000CB VOL: 1
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 1
; 0000 01CC // Bit0 pin change interrupt 0: Off
; 0000 01CD // Bit1 pin change interrupt 0: Off
; 0000 01CE // Bit2 pin change interrupt 0: Off
; 0000 01CF // Bit3 pin change interrupt 0: Off
; 0000 01D0 // Bit4 pin change interrupt 0: Off
; 0000 01D1 // Bit5 pin change interrupt 0: Off
; 0000 01D2 // Bit6 pin change interrupt 0: Off
; 0000 01D3 // Bit7 pin change interrupt 0: Off
; 0000 01D4 PORTE.INT0MASK=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 1
; 0000 01D5 // Bit0 pin change interrupt 1: Off
; 0000 01D6 // Bit1 pin change interrupt 1: Off
; 0000 01D7 // Bit2 pin change interrupt 1: Off
; 0000 01D8 // Bit3 pin change interrupt 1: Off
; 0000 01D9 // Bit4 pin change interrupt 1: Off
; 0000 01DA // Bit5 pin change interrupt 1: Off
; 0000 01DB // Bit6 pin change interrupt 1: Off
; 0000 01DC // Bit7 pin change interrupt 1: Off
; 0000 01DD PORTE.INT1MASK=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 1
; 0000 01DE 
; 0000 01DF // PORTF initialization
; 0000 01E0 // OUT register
; 0000 01E1 PORTF.OUT=0x08;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 1
; 0000 01E2 // Bit0: Input
; 0000 01E3 // Bit1: Input
; 0000 01E4 // Bit2: Input
; 0000 01E5 // Bit3: Output
; 0000 01E6 // Bit4: Input
; 0000 01E7 // Bit5: Input
; 0000 01E8 // Bit6: Input
; 0000 01E9 // Bit7: Input
; 0000 01EA PORTF.DIR=0x08;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 1
; 0000 01EB // Bit0 Output/Pull configuration: Totempole/No
; 0000 01EC // Bit0 Input/Sense configuration: Sense both edges
; 0000 01ED // Bit0 inverted: Off
; 0000 01EE // Bit0 slew rate limitation: Off
; 0000 01EF PORTF.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 1
; 0000 01F0 // Bit1 Output/Pull configuration: Totempole/No
; 0000 01F1 // Bit1 Input/Sense configuration: Sense both edges
; 0000 01F2 // Bit1 inverted: Off
; 0000 01F3 // Bit1 slew rate limitation: Off
; 0000 01F4 PORTF.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 1
; 0000 01F5 // Bit2 Output/Pull configuration: Totempole/No
; 0000 01F6 // Bit2 Input/Sense configuration: Sense both edges
; 0000 01F7 // Bit2 inverted: Off
; 0000 01F8 // Bit2 slew rate limitation: Off
; 0000 01F9 PORTF.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 1
; 0000 01FA // Bit3 Output/Pull configuration: Totempole/No
; 0000 01FB // Bit3 Input/Sense configuration: Sense both edges
; 0000 01FC // Bit3 inverted: Off
; 0000 01FD // Bit3 slew rate limitation: Off
; 0000 01FE PORTF.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 1
; 0000 01FF // Bit4 Output/Pull configuration: Totempole/No
; 0000 0200 // Bit4 Input/Sense configuration: Sense both edges
; 0000 0201 // Bit4 inverted: Off
; 0000 0202 // Bit4 slew rate limitation: Off
; 0000 0203 PORTF.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 1
; 0000 0204 // Bit5 Output/Pull configuration: Totempole/No
; 0000 0205 // Bit5 Input/Sense configuration: Sense both edges
; 0000 0206 // Bit5 inverted: Off
; 0000 0207 // Bit5 slew rate limitation: Off
; 0000 0208 PORTF.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 1
; 0000 0209 // Bit6 Output/Pull configuration: Totempole/No
; 0000 020A // Bit6 Input/Sense configuration: Sense both edges
; 0000 020B // Bit6 inverted: Off
; 0000 020C // Bit6 slew rate limitation: Off
; 0000 020D PORTF.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 1
; 0000 020E // Bit7 Output/Pull configuration: Totempole/No
; 0000 020F // Bit7 Input/Sense configuration: Sense both edges
; 0000 0210 // Bit7 inverted: Off
; 0000 0211 // Bit7 slew rate limitation: Off
; 0000 0212 PORTF.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 1
; 0000 0213 // Interrupt 0 level: Disabled
; 0000 0214 // Interrupt 1 level: Disabled
; 0000 0215 PORTF.INTCTRL=(PORTF.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0216 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000E8 VOL: 1
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 1
; 0000 0217 // Bit0 pin change interrupt 0: Off
; 0000 0218 // Bit1 pin change interrupt 0: Off
; 0000 0219 // Bit2 pin change interrupt 0: Off
; 0000 021A // Bit3 pin change interrupt 0: Off
; 0000 021B // Bit4 pin change interrupt 0: Off
; 0000 021C // Bit5 pin change interrupt 0: Off
; 0000 021D // Bit6 pin change interrupt 0: Off
; 0000 021E // Bit7 pin change interrupt 0: Off
; 0000 021F PORTF.INT0MASK=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 1
; 0000 0220 // Bit0 pin change interrupt 1: Off
; 0000 0221 // Bit1 pin change interrupt 1: Off
; 0000 0222 // Bit2 pin change interrupt 1: Off
; 0000 0223 // Bit3 pin change interrupt 1: Off
; 0000 0224 // Bit4 pin change interrupt 1: Off
; 0000 0225 // Bit5 pin change interrupt 1: Off
; 0000 0226 // Bit6 pin change interrupt 1: Off
; 0000 0227 // Bit7 pin change interrupt 1: Off
; 0000 0228 PORTF.INT1MASK=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 1
; 0000 0229 
; 0000 022A // PORTH initialization
; 0000 022B // OUT register
; 0000 022C PORTH.OUT=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 1
; 0000 022D // Bit0: Output
; 0000 022E // Bit1: Output
; 0000 022F // Bit2: Output
; 0000 0230 // Bit3: Output
; 0000 0231 // Bit4: Output
; 0000 0232 // Bit5: Output
; 0000 0233 // Bit6: Output
; 0000 0234 // Bit7: Output
; 0000 0235 PORTH.DIR=0xFF;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 1
; 0000 0236 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0237 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0238 // Bit0 inverted: Off
; 0000 0239 // Bit0 slew rate limitation: Off
; 0000 023A PORTH.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 1
; 0000 023B // Bit1 Output/Pull configuration: Totempole/No
; 0000 023C // Bit1 Input/Sense configuration: Sense both edges
; 0000 023D // Bit1 inverted: Off
; 0000 023E // Bit1 slew rate limitation: Off
; 0000 023F PORTH.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 1
; 0000 0240 // Bit2 Output/Pull configuration: Totempole/No
; 0000 0241 // Bit2 Input/Sense configuration: Sense both edges
; 0000 0242 // Bit2 inverted: Off
; 0000 0243 // Bit2 slew rate limitation: Off
; 0000 0244 PORTH.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 1
; 0000 0245 // Bit3 Output/Pull configuration: Totempole/No
; 0000 0246 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0247 // Bit3 inverted: Off
; 0000 0248 // Bit3 slew rate limitation: Off
; 0000 0249 PORTH.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 1
; 0000 024A // Bit4 Output/Pull configuration: Totempole/No
; 0000 024B // Bit4 Input/Sense configuration: Sense both edges
; 0000 024C // Bit4 inverted: Off
; 0000 024D // Bit4 slew rate limitation: Off
; 0000 024E PORTH.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 1
; 0000 024F // Bit5 Output/Pull configuration: Totempole/No
; 0000 0250 // Bit5 Input/Sense configuration: Sense both edges
; 0000 0251 // Bit5 inverted: Off
; 0000 0252 // Bit5 slew rate limitation: Off
; 0000 0253 PORTH.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 1
; 0000 0254 // Bit6 Output/Pull configuration: Totempole/No
; 0000 0255 // Bit6 Input/Sense configuration: Sense both edges
; 0000 0256 // Bit6 inverted: Off
; 0000 0257 // Bit6 slew rate limitation: Off
; 0000 0258 PORTH.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 1
; 0000 0259 // Bit7 Output/Pull configuration: Totempole/No
; 0000 025A // Bit7 Input/Sense configuration: Sense both edges
; 0000 025B // Bit7 inverted: Off
; 0000 025C // Bit7 slew rate limitation: Off
; 0000 025D PORTH.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 1
; 0000 025E // Interrupt 0 level: Disabled
; 0000 025F // Interrupt 1 level: Disabled
; 0000 0260 PORTH.INTCTRL=(PORTH.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0261 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000105 VOL: 1
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 1
; 0000 0262 // Bit0 pin change interrupt 0: Off
; 0000 0263 // Bit1 pin change interrupt 0: Off
; 0000 0264 // Bit2 pin change interrupt 0: Off
; 0000 0265 // Bit3 pin change interrupt 0: Off
; 0000 0266 // Bit4 pin change interrupt 0: Off
; 0000 0267 // Bit5 pin change interrupt 0: Off
; 0000 0268 // Bit6 pin change interrupt 0: Off
; 0000 0269 // Bit7 pin change interrupt 0: Off
; 0000 026A PORTH.INT0MASK=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 1
; 0000 026B // Bit0 pin change interrupt 1: Off
; 0000 026C // Bit1 pin change interrupt 1: Off
; 0000 026D // Bit2 pin change interrupt 1: Off
; 0000 026E // Bit3 pin change interrupt 1: Off
; 0000 026F // Bit4 pin change interrupt 1: Off
; 0000 0270 // Bit5 pin change interrupt 1: Off
; 0000 0271 // Bit6 pin change interrupt 1: Off
; 0000 0272 // Bit7 pin change interrupt 1: Off
; 0000 0273 PORTH.INT1MASK=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 1
; 0000 0274 
; 0000 0275 // PORTJ initialization
; 0000 0276 // OUT register
; 0000 0277 PORTJ.OUT=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 1
; 0000 0278 // Bit0: Output
; 0000 0279 // Bit1: Output
; 0000 027A // Bit2: Output
; 0000 027B // Bit3: Output
; 0000 027C // Bit4: Output
; 0000 027D // Bit5: Output
; 0000 027E // Bit6: Output
; 0000 027F // Bit7: Output
; 0000 0280 PORTJ.DIR=0xFF;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 1
; 0000 0281 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0282 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0283 // Bit0 inverted: Off
; 0000 0284 // Bit0 slew rate limitation: Off
; 0000 0285 PORTJ.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 1
; 0000 0286 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0287 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0288 // Bit1 inverted: Off
; 0000 0289 // Bit1 slew rate limitation: Off
; 0000 028A PORTJ.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 1
; 0000 028B // Bit2 Output/Pull configuration: Totempole/No
; 0000 028C // Bit2 Input/Sense configuration: Sense both edges
; 0000 028D // Bit2 inverted: Off
; 0000 028E // Bit2 slew rate limitation: Off
; 0000 028F PORTJ.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 1
; 0000 0290 // Bit3 Output/Pull configuration: Totempole/No
; 0000 0291 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0292 // Bit3 inverted: Off
; 0000 0293 // Bit3 slew rate limitation: Off
; 0000 0294 PORTJ.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 1
; 0000 0295 // Bit4 Output/Pull configuration: Totempole/No
; 0000 0296 // Bit4 Input/Sense configuration: Sense both edges
; 0000 0297 // Bit4 inverted: Off
; 0000 0298 // Bit4 slew rate limitation: Off
; 0000 0299 PORTJ.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 1
; 0000 029A // Bit5 Output/Pull configuration: Totempole/No
; 0000 029B // Bit5 Input/Sense configuration: Sense both edges
; 0000 029C // Bit5 inverted: Off
; 0000 029D // Bit5 slew rate limitation: Off
; 0000 029E PORTJ.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 1
; 0000 029F // Bit6 Output/Pull configuration: Totempole/No
; 0000 02A0 // Bit6 Input/Sense configuration: Sense both edges
; 0000 02A1 // Bit6 inverted: Off
; 0000 02A2 // Bit6 slew rate limitation: Off
; 0000 02A3 PORTJ.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 1
; 0000 02A4 // Bit7 Output/Pull configuration: Totempole/No
; 0000 02A5 // Bit7 Input/Sense configuration: Sense both edges
; 0000 02A6 // Bit7 inverted: Off
; 0000 02A7 // Bit7 slew rate limitation: Off
; 0000 02A8 PORTJ.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 1
; 0000 02A9 // Interrupt 0 level: Disabled
; 0000 02AA // Interrupt 1 level: Disabled
; 0000 02AB PORTJ.INTCTRL=(PORTJ.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 02AC 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000122 VOL: 1
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 1
; 0000 02AD // Bit0 pin change interrupt 0: Off
; 0000 02AE // Bit1 pin change interrupt 0: Off
; 0000 02AF // Bit2 pin change interrupt 0: Off
; 0000 02B0 // Bit3 pin change interrupt 0: Off
; 0000 02B1 // Bit4 pin change interrupt 0: Off
; 0000 02B2 // Bit5 pin change interrupt 0: Off
; 0000 02B3 // Bit6 pin change interrupt 0: Off
; 0000 02B4 // Bit7 pin change interrupt 0: Off
; 0000 02B5 PORTJ.INT0MASK=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 1
; 0000 02B6 // Bit0 pin change interrupt 1: Off
; 0000 02B7 // Bit1 pin change interrupt 1: Off
; 0000 02B8 // Bit2 pin change interrupt 1: Off
; 0000 02B9 // Bit3 pin change interrupt 1: Off
; 0000 02BA // Bit4 pin change interrupt 1: Off
; 0000 02BB // Bit5 pin change interrupt 1: Off
; 0000 02BC // Bit6 pin change interrupt 1: Off
; 0000 02BD // Bit7 pin change interrupt 1: Off
; 0000 02BE PORTJ.INT1MASK=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 1
; 0000 02BF 
; 0000 02C0 // PORTK initialization
; 0000 02C1 // OUT register
; 0000 02C2 PORTK.OUT=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 1
; 0000 02C3 // Bit0: Output
; 0000 02C4 // Bit1: Output
; 0000 02C5 // Bit2: Output
; 0000 02C6 // Bit3: Output
; 0000 02C7 // Bit4: Output
; 0000 02C8 // Bit5: Output
; 0000 02C9 // Bit6: Output
; 0000 02CA // Bit7: Output
; 0000 02CB PORTK.DIR=0xFF;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 1
; 0000 02CC // Bit0 Output/Pull configuration: Totempole/No
; 0000 02CD // Bit0 Input/Sense configuration: Sense both edges
; 0000 02CE // Bit0 inverted: Off
; 0000 02CF // Bit0 slew rate limitation: Off
; 0000 02D0 PORTK.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 1
; 0000 02D1 // Bit1 Output/Pull configuration: Totempole/No
; 0000 02D2 // Bit1 Input/Sense configuration: Sense both edges
; 0000 02D3 // Bit1 inverted: Off
; 0000 02D4 // Bit1 slew rate limitation: Off
; 0000 02D5 PORTK.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 1
; 0000 02D6 // Bit2 Output/Pull configuration: Totempole/No
; 0000 02D7 // Bit2 Input/Sense configuration: Sense both edges
; 0000 02D8 // Bit2 inverted: Off
; 0000 02D9 // Bit2 slew rate limitation: Off
; 0000 02DA PORTK.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 1
; 0000 02DB // Bit3 Output/Pull configuration: Totempole/No
; 0000 02DC // Bit3 Input/Sense configuration: Sense both edges
; 0000 02DD // Bit3 inverted: Off
; 0000 02DE // Bit3 slew rate limitation: Off
; 0000 02DF PORTK.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 1
; 0000 02E0 // Bit4 Output/Pull configuration: Totempole/No
; 0000 02E1 // Bit4 Input/Sense configuration: Sense both edges
; 0000 02E2 // Bit4 inverted: Off
; 0000 02E3 // Bit4 slew rate limitation: Off
; 0000 02E4 PORTK.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 1
; 0000 02E5 // Bit5 Output/Pull configuration: Totempole/No
; 0000 02E6 // Bit5 Input/Sense configuration: Sense both edges
; 0000 02E7 // Bit5 inverted: Off
; 0000 02E8 // Bit5 slew rate limitation: Off
; 0000 02E9 PORTK.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 1
; 0000 02EA // Bit6 Output/Pull configuration: Totempole/No
; 0000 02EB // Bit6 Input/Sense configuration: Sense both edges
; 0000 02EC // Bit6 inverted: Off
; 0000 02ED // Bit6 slew rate limitation: Off
; 0000 02EE PORTK.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 1
; 0000 02EF // Bit7 Output/Pull configuration: Totempole/No
; 0000 02F0 // Bit7 Input/Sense configuration: Sense both edges
; 0000 02F1 // Bit7 inverted: Off
; 0000 02F2 // Bit7 slew rate limitation: Off
; 0000 02F3 PORTK.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 1
; 0000 02F4 // Interrupt 0 level: Disabled
; 0000 02F5 // Interrupt 1 level: Disabled
; 0000 02F6 PORTK.INTCTRL=(PORTK.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 02F7 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $0000013F VOL: 1
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 1
; 0000 02F8 // Bit0 pin change interrupt 0: Off
; 0000 02F9 // Bit1 pin change interrupt 0: Off
; 0000 02FA // Bit2 pin change interrupt 0: Off
; 0000 02FB // Bit3 pin change interrupt 0: Off
; 0000 02FC // Bit4 pin change interrupt 0: Off
; 0000 02FD // Bit5 pin change interrupt 0: Off
; 0000 02FE // Bit6 pin change interrupt 0: Off
; 0000 02FF // Bit7 pin change interrupt 0: Off
; 0000 0300 PORTK.INT0MASK=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 1
; 0000 0301 // Bit0 pin change interrupt 1: Off
; 0000 0302 // Bit1 pin change interrupt 1: Off
; 0000 0303 // Bit2 pin change interrupt 1: Off
; 0000 0304 // Bit3 pin change interrupt 1: Off
; 0000 0305 // Bit4 pin change interrupt 1: Off
; 0000 0306 // Bit5 pin change interrupt 1: Off
; 0000 0307 // Bit6 pin change interrupt 1: Off
; 0000 0308 // Bit7 pin change interrupt 1: Off
; 0000 0309 PORTK.INT1MASK=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 1
; 0000 030A 
; 0000 030B // PORTQ initialization
; 0000 030C // OUT register
; 0000 030D PORTQ.OUT=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 1
; 0000 030E // Bit0: Input
; 0000 030F // Bit1: Input
; 0000 0310 // Bit2: Input
; 0000 0311 // Bit3: Input
; 0000 0312 PORTQ.DIR=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 1
; 0000 0313 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0314 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0315 // Bit0 inverted: Off
; 0000 0316 // Bit0 slew rate limitation: Off
; 0000 0317 PORTQ.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 1
; 0000 0318 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0319 // Bit1 Input/Sense configuration: Sense both edges
; 0000 031A // Bit1 inverted: Off
; 0000 031B // Bit1 slew rate limitation: Off
; 0000 031C PORTQ.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 1
; 0000 031D // Bit2 Output/Pull configuration: Totempole/No
; 0000 031E // Bit2 Input/Sense configuration: Sense both edges
; 0000 031F // Bit2 inverted: Off
; 0000 0320 // Bit2 slew rate limitation: Off
; 0000 0321 PORTQ.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 1
; 0000 0322 // Bit3 Output/Pull configuration: Totempole/No
; 0000 0323 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0324 // Bit3 inverted: Off
; 0000 0325 // Bit3 slew rate limitation: Off
; 0000 0326 PORTQ.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 1
; 0000 0327 // Interrupt 0 level: Disabled
; 0000 0328 // Interrupt 1 level: Disabled
; 0000 0329 PORTQ.INTCTRL=(PORTQ.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 032A 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000154 VOL: 1
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 1
; 0000 032B // Bit0 pin change interrupt 0: Off
; 0000 032C // Bit1 pin change interrupt 0: Off
; 0000 032D // Bit2 pin change interrupt 0: Off
; 0000 032E // Bit3 pin change interrupt 0: Off
; 0000 032F PORTQ.INT0MASK=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 1
; 0000 0330 // Bit0 pin change interrupt 1: Off
; 0000 0331 // Bit1 pin change interrupt 1: Off
; 0000 0332 // Bit2 pin change interrupt 1: Off
; 0000 0333 // Bit3 pin change interrupt 1: Off
; 0000 0334 PORTQ.INT1MASK=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 1
; 0000 0335 
; 0000 0336 // PORTR initialization
; 0000 0337 // OUT register
; 0000 0338 PORTR.OUT=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 1
; 0000 0339 // Bit0: Input
; 0000 033A // Bit1: Input
; 0000 033B PORTR.DIR=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 1
; 0000 033C // Bit0 Output/Pull configuration: Totempole/No
; 0000 033D // Bit0 Input/Sense configuration: Sense both edges
; 0000 033E // Bit0 inverted: Off
; 0000 033F // Bit0 slew rate limitation: Off
; 0000 0340 PORTR.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 1
; 0000 0341 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0342 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0343 // Bit1 inverted: Off
; 0000 0344 // Bit1 slew rate limitation: Off
; 0000 0345 PORTR.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 1
; 0000 0346 // Interrupt 0 level: Disabled
; 0000 0347 // Interrupt 1 level: Disabled
; 0000 0348 PORTR.INTCTRL=(PORTR.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0349 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000165 VOL: 1
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 1
; 0000 034A // Bit0 pin change interrupt 0: Off
; 0000 034B // Bit1 pin change interrupt 0: Off
; 0000 034C PORTR.INT0MASK=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 1
; 0000 034D // Bit0 pin change interrupt 1: Off
; 0000 034E // Bit1 pin change interrupt 1: Off
; 0000 034F PORTR.INT1MASK=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 1
; 0000 0350 }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;
;// Virtual Ports initialization
;void vports_init(void)
; 0000 0354 {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0355 // PORTA mapped to VPORT0
; 0000 0356 // PORTB mapped to VPORT1
; 0000 0357 PORTCFG.VPCTRLA=PORTCFG_VP1MAP_PORTB_gc | PORTCFG_VP0MAP_PORTA_gc;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 1
; 0000 0358 // PORTC mapped to VPORT2
; 0000 0359 // PORTD mapped to VPORT3
; 0000 035A PORTCFG.VPCTRLB=PORTCFG_VP3MAP_PORTD_gc | PORTCFG_VP2MAP_PORTC_gc;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 1
; 0000 035B }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;
;// Disable a Timer/Counter type 0
;void tc0_disable(TC0_t *ptc)
; 0000 035F {
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0360 // Timer/Counter off
; 0000 0361 ptc->CTRLA=(ptc->CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_OFF_gc;
;PCODE: $0000017A VOL: 0
;	*ptc -> Y+0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0362 // Issue a reset command
; 0000 0363 ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0364 }
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;
;// Disable a Timer/Counter type 1
;void tc1_disable(TC1_t *ptc)
; 0000 0368 {
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0369 // Timer/Counter off
; 0000 036A ptc->CTRLA=(ptc->CTRLA & (~TC1_CLKSEL_gm)) | TC_CLKSEL_OFF_gc;
;PCODE: $0000018A VOL: 0
;	*ptc -> Y+0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 036B // Issue a reset command
; 0000 036C ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 036D }
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;
;// Global variables
;#define radix   9
;#define fft_N   ((unsigned int)(0x01 << radix))
;#define Vref    2.0
;
;typedef struct
;        {
;            float real;
;            float imag;
;        } complex;
;
;union _data_unifier_
;{
;    complex fft_results[fft_N];
;    signed int adc_data[fft_N*2];
;    float fft_abs[fft_N];
;    unsigned char fft_abs_uc[fft_N << 1];
;} fft_adc;
;
;//______________________________________________________________SAMPLING_FUNCTIONS_&_VARIABLES_&_INTERRUPTS_____________________
;
;
;// Initializations
;
;// Timer/Counter TCD0 initialization (Sampling commence)
;void tcd0_init(void)
; 0000 0389 {
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 038A unsigned char s;
; 0000 038B 
; 0000 038C // Note: the correct PORTD direction for the Compare Channels outputs
; 0000 038D // is configured in the ports_init function
; 0000 038E 
; 0000 038F // Save interrupts enabled/disabled state
; 0000 0390 s=SREG;
;PCODE: $0000019A VOL: 0
;	s -> R17
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0391 // Disable interrupts
; 0000 0392 #asm("cli")
;PCODE: $0000019D VOL: 0
	cli
;PCODE: $0000019E VOL: 0
; 0000 0393 
; 0000 0394 // Disable and reset the timer/counter just to be sure
; 0000 0395 tc0_disable(&TCD0);
;PCODE: $0000019F VOL: 1
;PCODE: $000001A0 VOL: 0
; 0000 0396 // Clock source: Peripheral Clock/1024
; 0000 0397 TCD0.CTRLA=(TCD0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV1024_gc;
;PCODE: $000001A1 VOL: 1
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 1
; 0000 0398 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 0399 // Compare/Capture on channel A: Off
; 0000 039A // Compare/Capture on channel B: Off
; 0000 039B // Compare/Capture on channel C: Off
; 0000 039C // Compare/Capture on channel D: Off
; 0000 039D TCD0.CTRLB=(TCD0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) |
; 0000 039E 	TC_WGMODE_NORMAL_gc;
;PCODE: $000001A5 VOL: 1
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 1
; 0000 039F 
; 0000 03A0 // Capture event source: None
; 0000 03A1 // Capture event action: None
; 0000 03A2 TCD0.CTRLD=(TCD0.CTRLD & (~(TC0_EVACT_gm | TC0_EVSEL_gm))) |
; 0000 03A3 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $000001A9 VOL: 1
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 1
; 0000 03A4 
; 0000 03A5 // Overflow interrupt: Medium Level
; 0000 03A6 // Error interrupt: Disabled
; 0000 03A7 TCD0.INTCTRLA=(TCD0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) |
; 0000 03A8 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
;PCODE: $000001AE VOL: 1
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 1
; 0000 03A9 
; 0000 03AA // Compare/Capture channel A interrupt: Disabled
; 0000 03AB // Compare/Capture channel B interrupt: Disabled
; 0000 03AC // Compare/Capture channel C interrupt: Disabled
; 0000 03AD // Compare/Capture channel D interrupt: Disabled
; 0000 03AE TCD0.INTCTRLB=(TCD0.INTCTRLB & (~(TC0_CCDINTLVL_gm | TC0_CCCINTLVL_gm | TC0_CCBINTLVL_gm | TC0_CCAINTLVL_gm))) |
; 0000 03AF 	TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $000001B3 VOL: 1
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 1
; 0000 03B0 
; 0000 03B1 // High resolution extension: Off
; 0000 03B2 HIRESD.CTRL&= ~HIRES_HREN0_bm;
;PCODE: $000001BA VOL: 1
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 1
; 0000 03B3 
; 0000 03B4 // Clear the interrupt flags
; 0000 03B5 TCD0.INTFLAGS=TCD0.INTFLAGS;
;PCODE: $000001BD VOL: 1
;PCODE: $000001BE VOL: 1
; 0000 03B6 // Set counter register
; 0000 03B7 TCD0.CNT=0x0000;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 1
; 0000 03B8 // Set period register
; 0000 03B9 TCD0.PER=0x7A11;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 1
; 0000 03BA // Set channel A Compare/Capture register
; 0000 03BB TCD0.CCA=0x0000;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 1
; 0000 03BC // Set channel B Compare/Capture register
; 0000 03BD TCD0.CCB=0x0000;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 1
; 0000 03BE // Set channel C Compare/Capture register
; 0000 03BF TCD0.CCC=0x0000;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 1
; 0000 03C0 // Set channel D Compare/Capture register
; 0000 03C1 TCD0.CCD=0x0000;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 1
; 0000 03C2 
; 0000 03C3 // Restore interrupts enabled/disabled state
; 0000 03C4 SREG=s;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 03C5 }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;inline void sampling_commence_disable (void)
; 0000 03C7 {
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 03C8     TCD0.CTRLA = 0x00;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 1
; 0000 03C9     TCD0.CNT = 0x00;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 1
; 0000 03CA     TCD0.INTFLAGS = 0x01;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 1
; 0000 03CB }
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;inline void sampling_commence_enable (void)
; 0000 03CD {
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 03CE     TCD0.CTRLA = TC_CLKSEL_DIV1024_gc;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 1
; 0000 03CF }
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;
;#define SAMPLING_TIMER_PER  TCC0.PER
;// Timer/Counter TCC0 initialization (ADC trigger timer)
;void tcc0_init(void)
; 0000 03D4 {
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 03D5 unsigned char s;
; 0000 03D6 unsigned char n;
; 0000 03D7 
; 0000 03D8 // Note: the correct PORTC direction for the Compare Channels outputs
; 0000 03D9 // is configured in the ports_init function
; 0000 03DA 
; 0000 03DB // Save interrupts enabled/disabled state
; 0000 03DC s=SREG;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 03DD // Disable interrupts
; 0000 03DE #asm("cli")
;PCODE: $000001E6 VOL: 0
	cli
;PCODE: $000001E7 VOL: 0
; 0000 03DF 
; 0000 03E0 // Disable and reset the timer/counter just to be sure
; 0000 03E1 tc0_disable(&TCC0);
;PCODE: $000001E8 VOL: 1
;PCODE: $000001E9 VOL: 0
; 0000 03E2 // Clock source: Peripheral Clock/1
; 0000 03E3 TCC0.CTRLA=(TCC0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV1_gc;
;PCODE: $000001EA VOL: 1
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 1
; 0000 03E4 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 03E5 // Compare/Capture on channel A: Off
; 0000 03E6 // Compare/Capture on channel B: Off
; 0000 03E7 // Compare/Capture on channel C: Off
; 0000 03E8 // Compare/Capture on channel D: Off
; 0000 03E9 TCC0.CTRLB=(TCC0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) |
; 0000 03EA 	TC_WGMODE_NORMAL_gc;
;PCODE: $000001EE VOL: 1
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 1
; 0000 03EB 
; 0000 03EC // Capture event source: None
; 0000 03ED // Capture event action: None
; 0000 03EE TCC0.CTRLD=(TCC0.CTRLD & (~(TC0_EVACT_gm | TC0_EVSEL_gm))) |
; 0000 03EF 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $000001F2 VOL: 1
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 1
; 0000 03F0 
; 0000 03F1 // Overflow interrupt: Disabled
; 0000 03F2 // Error interrupt: Disabled
; 0000 03F3 TCC0.INTCTRLA=(TCC0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) |
; 0000 03F4 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc;
;PCODE: $000001F7 VOL: 1
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 1
; 0000 03F5 
; 0000 03F6 // Compare/Capture channel A interrupt: Disabled
; 0000 03F7 // Compare/Capture channel B interrupt: Disabled
; 0000 03F8 // Compare/Capture channel C interrupt: Disabled
; 0000 03F9 // Compare/Capture channel D interrupt: Disabled
; 0000 03FA TCC0.INTCTRLB=(TCC0.INTCTRLB & (~(TC0_CCDINTLVL_gm | TC0_CCCINTLVL_gm | TC0_CCBINTLVL_gm | TC0_CCAINTLVL_gm))) |
; 0000 03FB 	TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $000001FC VOL: 1
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 1
; 0000 03FC 
; 0000 03FD // High resolution extension: Off
; 0000 03FE HIRESC.CTRL&= ~HIRES_HREN0_bm;
;PCODE: $00000203 VOL: 1
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 1
; 0000 03FF 
; 0000 0400 // Advanced Waveform Extension initialization
; 0000 0401 // Optimize for speed
; 0000 0402 #pragma optsize-
; 0000 0403 // Disable locking the AWEX configuration registers just to be sure
; 0000 0404 n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
;PCODE: $00000206 VOL: 1
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0405 CCP=CCP_IOREG_gc;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0406 MCU.AWEXLOCK=n;
;PCODE: $0000020B VOL: 1
;PCODE: $0000020C VOL: 0
; 0000 0407 // Restore optimization for size if needed
; 0000 0408 #pragma optsize_default
; 0000 0409 
; 0000 040A // Pattern generation: Off
; 0000 040B // Dead time insertion: Off
; 0000 040C AWEXC.CTRL&= ~(AWEX_PGM_bm | AWEX_CWCM_bm | AWEX_DTICCDEN_bm | AWEX_DTICCCEN_bm | AWEX_DTICCBEN_bm | AWEX_DTICCAEN_bm);
;PCODE: $0000020D VOL: 1
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 1
; 0000 040D 
; 0000 040E // Fault protection initialization
; 0000 040F // Fault detection on OCD Break detection: On
; 0000 0410 // Fault detection restart mode: Latched Mode
; 0000 0411 // Fault detection action: None (Fault protection disabled)
; 0000 0412 AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0000 0413 	AWEX_FDACT_NONE_gc;
;PCODE: $00000210 VOL: 1
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 1
; 0000 0414 // Fault detect events:
; 0000 0415 // Event channel 0: Off
; 0000 0416 // Event channel 1: Off
; 0000 0417 // Event channel 2: Off
; 0000 0418 // Event channel 3: Off
; 0000 0419 // Event channel 4: Off
; 0000 041A // Event channel 5: Off
; 0000 041B // Event channel 6: Off
; 0000 041C // Event channel 7: Off
; 0000 041D AWEXC.FDEVMASK=0b00000000;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 1
; 0000 041E // Make sure the fault detect flag is cleared
; 0000 041F AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
;PCODE: $00000216 VOL: 1
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 1
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0420 
; 0000 0421 // Clear the interrupt flags
; 0000 0422 TCC0.INTFLAGS=TCC0.INTFLAGS;
;PCODE: $0000021E VOL: 1
;PCODE: $0000021F VOL: 1
; 0000 0423 // Set counter register
; 0000 0424 TCC0.CNT=0x0000;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 1
; 0000 0425 // Set period register
; 0000 0426 TCC0.PER=0x000F;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 1
; 0000 0427 // Set channel A Compare/Capture register
; 0000 0428 TCC0.CCA=0x0000;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 1
; 0000 0429 // Set channel B Compare/Capture register
; 0000 042A TCC0.CCB=0x0000;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 1
; 0000 042B // Set channel C Compare/Capture register
; 0000 042C TCC0.CCC=0x0000;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 1
; 0000 042D // Set channel D Compare/Capture register
; 0000 042E TCC0.CCD=0x0000;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 1
; 0000 042F 
; 0000 0430 // Restore interrupts enabled/disabled state
; 0000 0431 SREG=s;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0432 }
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;unsigned char TCC0_CTRLA_temp = 0x00;
;inline void sampling_disable (void)
; 0000 0435 {
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0436     TCC0_CTRLA_temp = TCC0.CTRLA;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 1
; 0000 0437     TCC0.CTRLA = 0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 1
; 0000 0438     TCC0.CNT = 0x00;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 1
; 0000 0439 }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;inline void sampling_enable (void)
; 0000 043B {
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 043C     TCC0.CTRLA = TCC0_CTRLA_temp;
;PCODE: $0000023D VOL: 1
;PCODE: $0000023E VOL: 0
; 0000 043D }
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;
;// Event System initialization (ADC trigger Event)
;void event_system_init(void)
; 0000 0441 {
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0442 // Event System Channel 0 source: None
; 0000 0443 EVSYS.CH0MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 1
; 0000 0444 // Event System Channel 1 source: None
; 0000 0445 EVSYS.CH1MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 1
; 0000 0446 // Event System Channel 2 source: None
; 0000 0447 EVSYS.CH2MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 1
; 0000 0448 // Event System Channel 3 source: None
; 0000 0449 EVSYS.CH3MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 1
; 0000 044A // Event System Channel 4 source: None
; 0000 044B EVSYS.CH4MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 1
; 0000 044C // Event System Channel 5 source: None
; 0000 044D EVSYS.CH5MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 1
; 0000 044E // Event System Channel 6 source: None
; 0000 044F EVSYS.CH6MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 1
; 0000 0450 // Event System Channel 7 source: Timer/Counter C0 Overflow
; 0000 0451 EVSYS.CH7MUX=EVSYS_CHMUX_TCC0_OVF_gc;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 1
; 0000 0452 
; 0000 0453 // Event System Channel 0 Digital Filter Coefficient: 1 Sample
; 0000 0454 EVSYS.CH0CTRL=(EVSYS.CH0CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 0455 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000253 VOL: 1
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 1
; 0000 0456 // Event System Channel 1 Digital Filter Coefficient: 1 Sample
; 0000 0457 EVSYS.CH1CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 1
; 0000 0458 // Event System Channel 2 Digital Filter Coefficient: 1 Sample
; 0000 0459 EVSYS.CH2CTRL=(EVSYS.CH2CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 045A 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000259 VOL: 1
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 1
; 0000 045B // Event System Channel 3 Digital Filter Coefficient: 1 Sample
; 0000 045C EVSYS.CH3CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 1
; 0000 045D // Event System Channel 4 Digital Filter Coefficient: 1 Sample
; 0000 045E EVSYS.CH4CTRL=(EVSYS.CH4CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 045F 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000025F VOL: 1
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 1
; 0000 0460 // Event System Channel 5 Digital Filter Coefficient: 1 Sample
; 0000 0461 EVSYS.CH5CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 1
; 0000 0462 // Event System Channel 6 Digital Filter Coefficient: 1 Sample
; 0000 0463 EVSYS.CH6CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 1
; 0000 0464 // Event System Channel 7 Digital Filter Coefficient: 1 Sample
; 0000 0465 EVSYS.CH7CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 1
; 0000 0466 
; 0000 0467 // Event System Channel 0 output: Disabled
; 0000 0468 // Note: the correct direction for the Event System Channel 0 output
; 0000 0469 // is configured in the ports_init function
; 0000 046A PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_EVOUT_gm)) | PORTCFG_EVOUT_OFF_gc;
;PCODE: $00000269 VOL: 1
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 1
; 0000 046B }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;
;// ADC initialization
;// Function used to read the calibration byte from the
;// signature row, specified by 'index'
;#pragma optsize-
;unsigned char read_calibration_byte(unsigned char index)
; 0000 0472 {
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0473 unsigned char r;
; 0000 0474 NVM.CMD=NVM_CMD_READ_CALIB_ROW_gc;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;	index -> Y+1
;	r -> R17
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 1
; 0000 0475 r=*((flash unsigned char*) index);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0476 // Clean up NVM command register
; 0000 0477 NVM.CMD=NVM_CMD_NO_OPERATION_gc;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 1
; 0000 0478 return r;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0479 }
;PCODE: $0000027F VOL: 0
;#pragma optsize_default
;
;// ADCA initialization
;// Variable used to store the ADC offset
;// for 12 Bit Signed conversion mode
;signed int adca_offset;
;
;void adca_init(unsigned char gain)
; 0000 0482 {
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0483 unsigned char i;
; 0000 0484 int offs;
; 0000 0485 
; 0000 0486 // ADCA is enabled
; 0000 0487 // Resolution: 12 Bits
; 0000 0488 // Load the calibration value for 12 Bit resolution
; 0000 0489 // from the signature row
; 0000 048A ADCA.CALL=read_calibration_byte(PROD_SIGNATURES_START+ADCACAL0_offset);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;	gain -> Y+4
;	i -> R17
;	offs -> R18,R19
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 1
; 0000 048B ADCA.CALH=read_calibration_byte(PROD_SIGNATURES_START+ADCACAL1_offset);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 1
; 0000 048C 
; 0000 048D // Free Running mode: Off
; 0000 048E // Conversion mode: Signed
; 0000 048F ADCA.CTRLB=(ADCA.CTRLB & (~(ADC_CONMODE_bm | ADC_FREERUN_bm | ADC_RESOLUTION_gm))) |
; 0000 0490 	ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
;PCODE: $0000028A VOL: 1
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 1
; 0000 0491 
; 0000 0492 // Clock frequency: 2000.000 kHz
; 0000 0493 ADCA.PRESCALER=(ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV16_gc;
;PCODE: $0000028F VOL: 1
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 1
; 0000 0494 
; 0000 0495 // Reference:
; 0000 0496 // Temperature reference: Off
; 0000 0497 ADCA.REFCTRL=(ADCA.REFCTRL & ((~(ADC_REFSEL_gm | ADC_TEMPREF_bm)) | ADC_BANDGAP_bm)) |
; 0000 0498 	ADC_REFSEL_AREFA_gc;
;PCODE: $00000293 VOL: 1
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 1
; 0000 0499 
; 0000 049A     // Read and save the ADC offset using channel 0
; 0000 049B     ADCA.CH0.CTRL=(ADCA.CH0.CTRL & (~(ADC_CH_START_bm | ADC_CH_GAINFAC_gm | ADC_CH_INPUTMODE_gm))) |
; 0000 049C     	gain | ADC_CH_INPUTMODE_DIFF_gc;
;PCODE: $00000297 VOL: 1
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 1
; 0000 049D     ADCA.CH0.MUXCTRL=(ADCA.CH0.MUXCTRL & (~(ADC_CH_MUXPOS_gm | ADC_CH_MUXNEG_gm))) |
; 0000 049E     	ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN0_gc;
;PCODE: $0000029D VOL: 1
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 1
; 0000 049F     // Enable the ADC in order to read the offset
; 0000 04A0     ADCA.CTRLA|=ADC_ENABLE_bm;
;PCODE: $000002A2 VOL: 1
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 1
; 0000 04A1     // Insert a delay to allow the ADC common mode voltage to stabilize
; 0000 04A2     delay_us(5);
;PCODE: $000002A5 VOL: 0
; 0000 04A3     // Perform several offset measurements and store the mean value
; 0000 04A4     offs=0;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 04A5     for (i=0; i<16; i++)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 04A6     {
; 0000 04A7         // Start the AD conversion on channel 0
; 0000 04A8         ADCA.CH0.CTRL|=ADC_CH_START_bm;
;PCODE: $000002B1 VOL: 1
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 1
; 0000 04A9         // Wait for the AD conversion to complete
; 0000 04AA         while ((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm)==0);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 1
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 04AB         // Clear the interrupt flag
; 0000 04AC         ADCA.CH0.INTFLAGS=ADC_CH_CHIF_bm;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 1
; 0000 04AD         // Read the offset
; 0000 04AE         offs+=(signed char) ADCA.CH0.RES;
;PCODE: $000002BC VOL: 1
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 04AF     }
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 04B0     // Disable the ADC
; 0000 04B1     ADCA.CTRLA&= ~ADC_ENABLE_bm;
;PCODE: $000002C5 VOL: 1
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 1
; 0000 04B2     // Store the mean value of the offset
; 0000 04B3     adca_offset=(signed char) (offs >> 4);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 04B4 
; 0000 04B5 // Initialize the ADC Compare register
; 0000 04B6 ADCA.CMPL=0x00;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 1
; 0000 04B7 ADCA.CMPH=0x00;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 1
; 0000 04B8 
; 0000 04B9 // ADC channel 0 gain: 1
; 0000 04BA // ADC channel 0 input mode: Differential input signal with gain
; 0000 04BB //ADCA.CH0.CTRL=(ADCA.CH0.CTRL & (~(ADC_CH_START_bm | ADC_CH_GAINFAC_gm | ADC_CH_INPUTMODE_gm))) |
; 0000 04BC //	ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
; 0000 04BD ADCA.CH0.CTRL=(ADCA.CH0.CTRL & (~(ADC_CH_START_bm | ADC_CH_GAINFAC_gm | ADC_CH_INPUTMODE_gm))) |
; 0000 04BE 	gain | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
;PCODE: $000002D1 VOL: 1
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 1
; 0000 04BF 
; 0000 04C0 // ADC channel 0 positive input: ADC2 pin
; 0000 04C1 // ADC channel 0 negative input: ADC5 pin
; 0000 04C2 ADCA.CH0.MUXCTRL=(ADCA.CH0.MUXCTRL & (~(ADC_CH_MUXPOS_gm | ADC_CH_MUXNEG_gm))) |
; 0000 04C3 	ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN5_gc;
;PCODE: $000002D7 VOL: 1
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 1
; 0000 04C4 
; 0000 04C5 // AD conversion is started by the event system
; 0000 04C6 // Event channel(s): 7 trigger(s) ADC channel(s): 0
; 0000 04C7 ADCA.EVCTRL=ADC_EVSEL_7_gc | ADC_EVACT_CH0_gc;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 1
; 0000 04C8 
; 0000 04C9 // Channel 0 interrupt: Disabled
; 0000 04CA ADCA.CH0.INTCTRL=(ADCA.CH0.INTCTRL & (~(ADC_CH_INTMODE_gm | ADC_CH_INTLVL_gm))) |
; 0000 04CB 	ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $000002DD VOL: 1
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 1
; 0000 04CC // Channel 1 interrupt: Disabled
; 0000 04CD ADCA.CH1.INTCTRL&= ~(ADC_CH_INTMODE_gm | ADC_CH_INTLVL_gm);
;PCODE: $000002E2 VOL: 1
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 1
; 0000 04CE // Channel 2 interrupt: Disabled
; 0000 04CF ADCA.CH2.INTCTRL&= ~(ADC_CH_INTMODE_gm | ADC_CH_INTLVL_gm);
;PCODE: $000002E5 VOL: 1
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 1
; 0000 04D0 // Channel 3 interrupt: Disabled
; 0000 04D1 ADCA.CH3.INTCTRL&= ~(ADC_CH_INTMODE_gm | ADC_CH_INTLVL_gm);
;PCODE: $000002E8 VOL: 1
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 1
; 0000 04D2 
; 0000 04D3 // Enable the ADC
; 0000 04D4 ADCA.CTRLA|=ADC_ENABLE_bm;
;PCODE: $000002EB VOL: 1
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 1
; 0000 04D5 // Insert a delay to allow the ADC common mode voltage to stabilize
; 0000 04D6 delay_us(2);
;PCODE: $000002EE VOL: 0
; 0000 04D7 }
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;
;inline void dma_controller_reset (void)
; 0000 04DA {
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 04DB     DMA.CTRL = 0b00000000;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 1
; 0000 04DC     while (DMA.CTRL & 0b10000000);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 1
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 04DD     DMA.CTRL = 0b01000000;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 1
; 0000 04DE     while (DMA.CTRL & 0b01000000);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 1
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 04DF }
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;inline void dma_channel0_reset (void)
; 0000 04E1 {
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 04E2     DMA.CH0.CTRLA = 0b00000000;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 1
; 0000 04E3     while (DMA.CH0.CTRLA & 0b10000000);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 1
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 04E4     DMA.CH0.CTRLA = 0b01000000;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 1
; 0000 04E5     while (DMA.CH0.CTRLA & 0b01000000);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 1
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 04E6 }
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;// Direct Memory Access (DMA) initialization (copies ADC output to adc data vector without CPU overhead)
;inline void dma_disable (void)
; 0000 04E9 {
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 04EA     dma_controller_reset();
;PCODE: $0000031D VOL: 0
; 0000 04EB     dma_channel0_reset();
;PCODE: $0000031E VOL: 0
; 0000 04EC }
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;inline void dma_init (void)
; 0000 04EE {
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 04EF     DMA.CH0.ADDRCTRL = 0b10010101;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 1
; 0000 04F0     DMA.CH0.TRIGSRC = 0x10 + 0x00;
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 1
; 0000 04F1     DMA.CH0.TRFCNT = fft_N*2;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 1
; 0000 04F2     DMA.CH0.REPCNT = 0x01;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 1
; 0000 04F3     DMA.CH0.SRCADDR = ((unsigned long)(&ADCA.CH0.RES));
;PCODE: $0000032B VOL: 1
;PCODE: $0000032C VOL: 1
; 0000 04F4     DMA.CH0.DESTADDR = ((unsigned long)(&(fft_adc.adc_data[fft_N])));
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 1
; 0000 04F5     DMA.CH0.CTRLB = 0b00000011;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 1
; 0000 04F6     DMA.CH0.CTRLA = 0b10000001;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 1
; 0000 04F7     DMA.CTRL = 0b10000011;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 1
; 0000 04F8 }
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;
;#define SAMPLING_STATE_IDLE     0
;#define SAMPLING_STATE_SAMPLING 1
;#define SAMPLING_STATE_FFT      2
;#define SAMPLING_STATE_UPDATING 3
;
;unsigned char sampling_state = SAMPLING_STATE_IDLE;
;
;// Timer/counter TCD0 Overflow/Underflow interrupt service routine
;interrupt [TCD0_OVF_vect] void tcd0_overflow_isr(void)
; 0000 0503 {
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0504 // write your code here
; 0000 0505     dma_init();
;PCODE: $0000033B VOL: 0
; 0000 0506     sampling_enable();
;PCODE: $0000033C VOL: 0
; 0000 0507     sampling_state = SAMPLING_STATE_SAMPLING;
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0508 }
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;
;// DMA channel0 transaction complete interrupt service routine
;interrupt [DMA_CH0_vect] void dma_ch0_isr (void)
; 0000 050C {
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 050D     sampling_disable();
;PCODE: $00000344 VOL: 0
; 0000 050E     dma_disable();
;PCODE: $00000345 VOL: 0
; 0000 050F     sampling_state = SAMPLING_STATE_FFT;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0510 }
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;
;//______________________________________________________________DAC_FUNCTIONS_&_VARIABLES_&_INTERRUPTS__________________________
;
;// Timer/Counter TCE0 initialization
;void tce0_init(void)
; 0000 0516 {
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0517 unsigned char s;
; 0000 0518 unsigned char n;
; 0000 0519 
; 0000 051A // Note: the correct PORTE direction for the Compare Channels outputs
; 0000 051B // is configured in the ports_init function
; 0000 051C 
; 0000 051D // Save interrupts enabled/disabled state
; 0000 051E s=SREG;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 051F // Disable interrupts
; 0000 0520 #asm("cli")
;PCODE: $00000351 VOL: 0
	cli
;PCODE: $00000352 VOL: 0
; 0000 0521 
; 0000 0522 // Disable and reset the timer/counter just to be sure
; 0000 0523 tc0_disable(&TCE0);
;PCODE: $00000353 VOL: 1
;PCODE: $00000354 VOL: 0
; 0000 0524 // Clock source: Peripheral Clock/1
; 0000 0525 //TCE0.CTRLA=(TCE0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV1_gc;
; 0000 0526 TCE0.CTRLA = 0;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 1
; 0000 0527 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 0528 // Compare/Capture on channel A: Off
; 0000 0529 // Compare/Capture on channel B: Off
; 0000 052A // Compare/Capture on channel C: Off
; 0000 052B // Compare/Capture on channel D: Off
; 0000 052C TCE0.CTRLB=(TCE0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) |
; 0000 052D 	TC_WGMODE_NORMAL_gc;
;PCODE: $00000357 VOL: 1
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 1
; 0000 052E 
; 0000 052F // Capture event source: None
; 0000 0530 // Capture event action: None
; 0000 0531 TCE0.CTRLD=(TCE0.CTRLD & (~(TC0_EVACT_gm | TC0_EVSEL_gm))) |
; 0000 0532 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000035B VOL: 1
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 1
; 0000 0533 
; 0000 0534 // Overflow interrupt: Medium Level
; 0000 0535 // Error interrupt: Disabled
; 0000 0536 TCE0.INTCTRLA=(TCE0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) |
; 0000 0537 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
;PCODE: $00000360 VOL: 1
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 1
; 0000 0538 
; 0000 0539 // Compare/Capture channel A interrupt: Disabled
; 0000 053A // Compare/Capture channel B interrupt: Disabled
; 0000 053B // Compare/Capture channel C interrupt: Disabled
; 0000 053C // Compare/Capture channel D interrupt: Disabled
; 0000 053D TCE0.INTCTRLB=(TCE0.INTCTRLB & (~(TC0_CCDINTLVL_gm | TC0_CCCINTLVL_gm | TC0_CCBINTLVL_gm | TC0_CCAINTLVL_gm))) |
; 0000 053E 	TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000365 VOL: 1
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 1
; 0000 053F 
; 0000 0540 // High resolution extension: Off
; 0000 0541 HIRESE.CTRL&= ~HIRES_HREN0_bm;
;PCODE: $0000036C VOL: 1
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 1
; 0000 0542 
; 0000 0543 // Advanced Waveform Extension initialization
; 0000 0544 // Optimize for speed
; 0000 0545 #pragma optsize-
; 0000 0546 // Disable locking the AWEX configuration registers just to be sure
; 0000 0547 n=MCU.AWEXLOCK & (~MCU_AWEXELOCK_bm);
;PCODE: $0000036F VOL: 1
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0548 CCP=CCP_IOREG_gc;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0549 MCU.AWEXLOCK=n;
;PCODE: $00000374 VOL: 1
;PCODE: $00000375 VOL: 0
; 0000 054A // Restore optimization for size if needed
; 0000 054B #pragma optsize_default
; 0000 054C 
; 0000 054D // Pattern generation: Off
; 0000 054E // Dead time insertion: Off
; 0000 054F AWEXE.CTRL&= ~(AWEX_PGM_bm | AWEX_CWCM_bm | AWEX_DTICCDEN_bm | AWEX_DTICCCEN_bm | AWEX_DTICCBEN_bm | AWEX_DTICCAEN_bm);
;PCODE: $00000376 VOL: 1
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 1
; 0000 0550 
; 0000 0551 // Fault protection initialization
; 0000 0552 // Fault detection on OCD Break detection: On
; 0000 0553 // Fault detection restart mode: Latched Mode
; 0000 0554 // Fault detection action: None (Fault protection disabled)
; 0000 0555 AWEXE.FDCTRL=(AWEXE.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0000 0556 	AWEX_FDACT_NONE_gc;
;PCODE: $00000379 VOL: 1
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 1
; 0000 0557 // Fault detect events:
; 0000 0558 // Event channel 0: Off
; 0000 0559 // Event channel 1: Off
; 0000 055A // Event channel 2: Off
; 0000 055B // Event channel 3: Off
; 0000 055C // Event channel 4: Off
; 0000 055D // Event channel 5: Off
; 0000 055E // Event channel 6: Off
; 0000 055F // Event channel 7: Off
; 0000 0560 AWEXE.FDEVMASK=0b00000000;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 1
; 0000 0561 // Make sure the fault detect flag is cleared
; 0000 0562 AWEXE.STATUS|=AWEXE.STATUS & AWEX_FDF_bm;
;PCODE: $0000037F VOL: 1
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 1
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 0563 
; 0000 0564 // Clear the interrupt flags
; 0000 0565 TCE0.INTFLAGS=TCE0.INTFLAGS;
;PCODE: $00000387 VOL: 1
;PCODE: $00000388 VOL: 1
; 0000 0566 // Set counter register
; 0000 0567 TCE0.CNT=0x0000;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 1
; 0000 0568 // Set period register
; 0000 0569 TCE0.PER=0x009F;
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 1
; 0000 056A // Set channel A Compare/Capture register
; 0000 056B TCE0.CCA=0x0000;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 1
; 0000 056C // Set channel B Compare/Capture register
; 0000 056D TCE0.CCB=0x0000;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 1
; 0000 056E // Set channel C Compare/Capture register
; 0000 056F TCE0.CCC=0x0000;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 1
; 0000 0570 // Set channel D Compare/Capture register
; 0000 0571 TCE0.CCD=0x0000;
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 1
; 0000 0572 
; 0000 0573 // Restore interrupts enabled/disabled state
; 0000 0574 SREG=s;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0575 }
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;#define DAC_INPUT_LEN   ((unsigned int)(1 << (radix - 1)))
;unsigned char dac_inputs_min[DAC_INPUT_LEN];
;unsigned char dac_inputs_max[DAC_INPUT_LEN];
;register unsigned char dac_x_ptr = 0;
;register unsigned char dac_x_port_ptr0 = 0;
;register unsigned char dac_x_port_ptr1 = 0;
;register unsigned char dac_y_ptr = 0x01;
;register unsigned char dac_y_max;
;inline void dac_disable (void)
; 0000 057F {
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 0580     TCE0.CTRLA = 0x00;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 1
; 0000 0581     dac_x_ptr = 0;
;PCODE: $0000039E VOL: 0
; 0000 0582     dac_x_port_ptr0 = 0;
;PCODE: $0000039F VOL: 0
; 0000 0583     dac_x_port_ptr1 = 0;
;PCODE: $000003A0 VOL: 0
; 0000 0584     dac_y_ptr = 0;
;PCODE: $000003A1 VOL: 0
; 0000 0585     TCE0.CNT = 0x0000;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 1
; 0000 0586 }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;inline void dac_enable (void)
; 0000 0588 {
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0589     TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 1
; 0000 058A }
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;
;// Timer/Counter TCE1 initialization
;void tce1_init(void)
; 0000 058E {
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 058F unsigned char s;
; 0000 0590 
; 0000 0591 // Note: the correct PORTE direction for the Compare Channels outputs
; 0000 0592 // is configured in the ports_init function
; 0000 0593 
; 0000 0594 // Save interrupts enabled/disabled state
; 0000 0595 s=SREG;
;PCODE: $000003AE VOL: 0
;	s -> R17
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0596 // Disable interrupts
; 0000 0597 #asm("cli")
;PCODE: $000003B1 VOL: 0
	cli
;PCODE: $000003B2 VOL: 0
; 0000 0598 
; 0000 0599 // Disable and reset the timer/counter just to be sure
; 0000 059A tc1_disable(&TCE1);
;PCODE: $000003B3 VOL: 1
;PCODE: $000003B4 VOL: 0
; 0000 059B // Clock source: Peripheral Clock/1
; 0000 059C //TCE1.CTRLA=(TCE1.CTRLA & (~TC1_CLKSEL_gm)) | TC_CLKSEL_DIV1_gc;
; 0000 059D TCE1.CTRLA = 0x00;
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 1
; 0000 059E // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 059F // Compare/Capture on channel A: Off
; 0000 05A0 // Compare/Capture on channel B: Off
; 0000 05A1 TCE1.CTRLB=(TCE1.CTRLB & (~(TC1_CCAEN_bm | TC1_CCBEN_bm | TC1_WGMODE_gm))) |
; 0000 05A2 	TC_WGMODE_NORMAL_gc;
;PCODE: $000003B7 VOL: 1
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 1
; 0000 05A3 
; 0000 05A4 // Capture event source: None
; 0000 05A5 // Capture event action: None
; 0000 05A6 TCE1.CTRLD=(TCE1.CTRLD & (~(TC1_EVACT_gm | TC1_EVSEL_gm))) |
; 0000 05A7 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $000003BB VOL: 1
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 1
; 0000 05A8 
; 0000 05A9 // Overflow interrupt: High Level
; 0000 05AA // Error interrupt: Disabled
; 0000 05AB TCE1.INTCTRLA=(TCE1.INTCTRLA & (~(TC1_ERRINTLVL_gm | TC1_OVFINTLVL_gm))) |
; 0000 05AC 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
;PCODE: $000003C0 VOL: 1
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 1
; 0000 05AD 
; 0000 05AE // Compare/Capture channel A interrupt: Disabled
; 0000 05AF // Compare/Capture channel B interrupt: Disabled
; 0000 05B0 TCE1.INTCTRLB=(TCE1.INTCTRLB & (~(TC1_CCBINTLVL_gm | TC1_CCAINTLVL_gm))) |
; 0000 05B1 	TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $000003C5 VOL: 1
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 1
; 0000 05B2 
; 0000 05B3 // High resolution extension: Off
; 0000 05B4 HIRESE.CTRL&= ~HIRES_HREN1_bm;
;PCODE: $000003CA VOL: 1
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 1
; 0000 05B5 
; 0000 05B6 // Clear the interrupt flags
; 0000 05B7 TCE1.INTFLAGS=TCE1.INTFLAGS;
;PCODE: $000003CD VOL: 1
;PCODE: $000003CE VOL: 1
; 0000 05B8 // Set counter register
; 0000 05B9 TCE1.CNT=0x0000;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 1
; 0000 05BA // Set period register
; 0000 05BB TCE1.PER=0x07F;
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 1
; 0000 05BC // Set channel A Compare/Capture register
; 0000 05BD TCE1.CCA=0x0000;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 1
; 0000 05BE // Set channel B Compare/Capture register
; 0000 05BF TCE1.CCB=0x0000;
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 1
; 0000 05C0 
; 0000 05C1 // Restore interrupts enabled/disabled state
; 0000 05C2 SREG=s;
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 05C3 }
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;inline void calibration_disable (void)
; 0000 05C5 {
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 05C6     TCE1.CTRLA = 0x00;
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 1
; 0000 05C7 }
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;inline void calibration_enable (void)
; 0000 05C9 {
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 05CA     TCE1.CTRLA = TC_CLKSEL_DIV1_gc;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 1
; 0000 05CB }
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;
;// Timer/counter TCE0 Overflow/Underflow interrupt service routine
;interrupt [TCE0_OVF_vect] void tce0_overflow_isr(void)
; 0000 05CF {
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 05D0     PORTK.OUT = dac_y_ptr;
;PCODE: $000003EA VOL: 1
;PCODE: $000003EB VOL: 0
; 0000 05D1     PORTJ.OUT = dac_x_port_ptr1;
;PCODE: $000003EC VOL: 1
;PCODE: $000003ED VOL: 0
; 0000 05D2     PORTH.OUT = dac_x_port_ptr0;
;PCODE: $000003EE VOL: 1
;PCODE: $000003EF VOL: 0
; 0000 05D3     dac_y_ptr++;
;PCODE: $000003F0 VOL: 0
; 0000 05D4     if (dac_y_ptr >= dac_y_max)
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 05D5     {
; 0000 05D6         dac_x_ptr++;
;PCODE: $000003F4 VOL: 0
; 0000 05D7 
; 0000 05D8         dac_x_port_ptr0 = (dac_x_ptr << 4) & 0xF0;
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 05D9         dac_x_port_ptr1 = (dac_x_ptr >> 4) & 0x0F;
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 05DA //        dac_x_port_ptr0 = dac_x_ptr;
; 0000 05DB //#asm
; 0000 05DC //        swap    R9 ; swap dac_x_port_ptr0
; 0000 05DD //#endasm
; 0000 05DE //        dac_x_port_ptr1 = dac_x_port_ptr0;
; 0000 05DF //        dac_x_port_ptr0 &= 0xF0;
; 0000 05E0 //        dac_x_port_ptr1 &= 0x0F;
; 0000 05E1         dac_y_ptr = dac_inputs_min[dac_x_ptr];
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 05E2         dac_y_max = dac_inputs_max[dac_x_ptr];
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 05E3     }
; 0000 05E4 }
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;
;
;// Timer/counter TCE1 Overflow/Underflow interrupt service routine
;interrupt [TCE1_OVF_vect] void tce1_overflow_isr(void)
; 0000 05E9 {
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 05EA // write your code here
; 0000 05EB     static unsigned char state = 0;
; 0000 05EC     static union _char2int_
; 0000 05ED     {
; 0000 05EE         unsigned int i;
; 0000 05EF         unsigned char c[2];
; 0000 05F0     } x_val = {0}, y_val = {0};
; 0000 05F1     PORTJ.OUT = y_val.c[1] | x_val.c[0];
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 1
; 0000 05F2     PORTH.OUT = y_val.c[0];
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 1
; 0000 05F3     PORTK.OUT = x_val.c[1];
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 1
; 0000 05F4     switch (state)
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 05F5     {
; 0000 05F6     case 0:
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 05F7         if (++y_val.i == 0x0FFF)
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 05F8             state = 1;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 05F9         break;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 05FA     case 1:
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 05FB         x_val.i += 0x10;
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 05FC         if (x_val.i == 0xFFF0)
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 05FD             state = 2;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 05FE         break;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 05FF     case 2:
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0600         if (--y_val.i == 0x0001)
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0601             state = 3;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0602         break;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0603     case 3:
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 0604         x_val.i -= 0x10;
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0605         if (x_val.i == 0x0010)
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0606             state = 0;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 0607         break;
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 0608     }
;PCODE: $00000448 VOL: 0
; 0000 0609 }
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;
;
;//______________________________________________________________KEYPAD_FUNCTIONS_&_VARIABLES_&_INTERRUPTS_______________________
;// Initialization
;// Timer/Counter TCF0 initialization (Bounce and error detector timer for Keypad)
;void tcf0_init(void)
; 0000 0610 {
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 0611 unsigned char s;
; 0000 0612 
; 0000 0613 // Note: the correct PORTF direction for the Compare Channels outputs
; 0000 0614 // is configured in the ports_init function
; 0000 0615 
; 0000 0616 // Save interrupts enabled/disabled state
; 0000 0617 s=SREG;
;PCODE: $0000044E VOL: 0
;	s -> R17
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0618 // Disable interrupts
; 0000 0619 #asm("cli")
;PCODE: $00000451 VOL: 0
	cli
;PCODE: $00000452 VOL: 0
; 0000 061A 
; 0000 061B // Disable and reset the timer/counter just to be sure
; 0000 061C tc0_disable(&TCF0);
;PCODE: $00000453 VOL: 1
;PCODE: $00000454 VOL: 0
; 0000 061D // Clock source: Peripheral Clock/64
; 0000 061E TCF0.CTRLA=(TCF0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV64_gc;
;PCODE: $00000455 VOL: 1
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 1
; 0000 061F // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 0620 // Compare/Capture on channel A: Off
; 0000 0621 // Compare/Capture on channel B: Off
; 0000 0622 // Compare/Capture on channel C: Off
; 0000 0623 // Compare/Capture on channel D: Off
; 0000 0624 TCF0.CTRLB=(TCF0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) |
; 0000 0625 	TC_WGMODE_NORMAL_gc;
;PCODE: $00000459 VOL: 1
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 1
; 0000 0626 
; 0000 0627 // Capture event source: None
; 0000 0628 // Capture event action: None
; 0000 0629 TCF0.CTRLD=(TCF0.CTRLD & (~(TC0_EVACT_gm | TC0_EVSEL_gm))) |
; 0000 062A 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000045D VOL: 1
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 1
; 0000 062B 
; 0000 062C // Overflow interrupt: Low Level
; 0000 062D // Error interrupt: Disabled
; 0000 062E TCF0.INTCTRLA=(TCF0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) |
; 0000 062F 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
;PCODE: $00000462 VOL: 1
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 1
; 0000 0630 
; 0000 0631 // Compare/Capture channel A interrupt: Disabled
; 0000 0632 // Compare/Capture channel B interrupt: Disabled
; 0000 0633 // Compare/Capture channel C interrupt: Disabled
; 0000 0634 // Compare/Capture channel D interrupt: Disabled
; 0000 0635 TCF0.INTCTRLB=(TCF0.INTCTRLB & (~(TC0_CCDINTLVL_gm | TC0_CCCINTLVL_gm | TC0_CCBINTLVL_gm | TC0_CCAINTLVL_gm))) |
; 0000 0636 	TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000467 VOL: 1
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 1
; 0000 0637 
; 0000 0638 // High resolution extension: Off
; 0000 0639 HIRESF.CTRL&= ~HIRES_HREN0_bm;
;PCODE: $0000046E VOL: 1
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 1
; 0000 063A 
; 0000 063B // Clear the interrupt flags
; 0000 063C TCF0.INTFLAGS=TCF0.INTFLAGS;
;PCODE: $00000471 VOL: 1
;PCODE: $00000472 VOL: 1
; 0000 063D // Set counter register
; 0000 063E TCF0.CNT=0x0000;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 1
; 0000 063F // Set period register
; 0000 0640 TCF0.PER=0x61A7;
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 1
; 0000 0641 // Set channel A Compare/Capture register
; 0000 0642 TCF0.CCA=0x0000;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 1
; 0000 0643 // Set channel B Compare/Capture register
; 0000 0644 TCF0.CCB=0x0000;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 1
; 0000 0645 // Set channel C Compare/Capture register
; 0000 0646 TCF0.CCC=0x0000;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 1
; 0000 0647 // Set channel D Compare/Capture register
; 0000 0648 TCF0.CCD=0x0000;
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 1
; 0000 0649 
; 0000 064A // Restore interrupts enabled/disabled state
; 0000 064B SREG=s;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 064C }
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;
;// Global Variables for Keypad
;#define KEY_COUNT		16
;unsigned char key_col_pos_temp;
;unsigned char key_col_pos, key_row_pos;
;unsigned char key_pos;
;unsigned char key;
;
;#define KEY_BACKSPACE	10
;#define KEY_CALIBRATE	11
;#define KEY_UNITS		12
;#define KEY_SET			13
;#define KEY_ENTER		14
;#define KEY_MINUS		15
;#define KEY_RIGHT		9
;#define KEY_LEFT		7
;flash unsigned char key_pos_to_key[KEY_COUNT] = {1,2,3,KEY_BACKSPACE,4,5,6,KEY_CALIBRATE,7,8,9,
;                                                    KEY_UNITS,KEY_SET,0,KEY_ENTER,KEY_MINUS};
;
;enum _menu_states_
;{
;	menu_state_calib = 0,
;	menu_state_show_freq,
;	menu_state_show_div,
;	menu_state_show_min,
;	menu_state_show_gain,
;	menu_state_set_freq,
;	menu_state_set_div,
;	menu_state_set_min,
;	menu_state_set_gain,
;	menu_state_invalid_state,
;}
;next_menu_state, current_menu_state = menu_state_calib;
;
;void menu_display_calib (void)
; 0000 0670 {
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 0671 	lcd_clear();
;PCODE: $00000486 VOL: 0
; 0000 0672 	lcd_putsf("calibrate");
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0673     dac_disable();
;PCODE: $0000048A VOL: 0
; 0000 0674 	//  disable other preipherals
; 0000 0675 	sampling_commence_disable();
;PCODE: $0000048B VOL: 0
; 0000 0676     sampling_disable();
;PCODE: $0000048C VOL: 0
; 0000 0677     dma_disable();
;PCODE: $0000048D VOL: 0
; 0000 0678 	//  enable callibration
; 0000 0679 	calibration_enable();
;PCODE: $0000048E VOL: 0
; 0000 067A }
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;
;static unsigned char number_input_number_cntr;
;signed long int number_input (unsigned char minus_enable, unsigned char max_digits, unsigned char lcd_x_offset, unsigned char lcd_y)
; 0000 067E {
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 067F 	static signed int number;
; 0000 0680 	if ((current_menu_state < menu_state_set_freq) || (current_menu_state > menu_state_set_min))
;PCODE: $00000493 VOL: 0
;	minus_enable -> Y+3
;	max_digits -> Y+2
;	lcd_x_offset -> Y+1
;	lcd_y -> Y+0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 0681 	{
; 0000 0682 		number = 0;
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 0683 		number_input_number_cntr = 0;
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 0684 	}
; 0000 0685 	else
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0686 	{
; 0000 0687 		if ((key < 10) && (number_input_number_cntr < max_digits))
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 0688 		{
; 0000 0689 			number = 10*number + key;
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 068A 			lcd_putchar(key + '0');
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 068B 			number_input_number_cntr++;
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 068C 		}
; 0000 068D 		else if ((key == KEY_BACKSPACE) && (number_input_number_cntr > 0))
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 068E 		{
; 0000 068F 			number /= 10;
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 0690 			number_input_number_cntr--;
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 0691 			lcd_gotoxy(lcd_x_offset + number_input_number_cntr,lcd_y);
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0692 			if (number_input_number_cntr)
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 0693 				lcd_putchar(' ');
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 0694 			else
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 0695 				lcd_putchar('?');
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 0696 			lcd_gotoxy(lcd_x_offset + number_input_number_cntr,lcd_y);
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 0697 
; 0000 0698 		}
; 0000 0699 		else if ((key == KEY_MINUS) && (minus_enable))
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 069A 		{
; 0000 069B 			number = -number;
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 069C 			lcd_gotoxy(lcd_x_offset - 1,lcd_y);
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 069D 			if (number < 0)
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 069E 				lcd_putchar('-');
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 069F 			else
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 06A0 				lcd_putchar(' ');
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 06A1 			lcd_gotoxy(lcd_x_offset + number_input_number_cntr,lcd_y);
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 06A2 		}
; 0000 06A3 	}
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 06A4 
; 0000 06A5 	return number;
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 06A6 }
;PCODE: $00000510 VOL: 0
;
;void menu_display_show_freq (void)
; 0000 06A9 {
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
; 0000 06AA 	char str[5];
; 0000 06AB 	unsigned int freq;
; 0000 06AC 	if (number_input_number_cntr && (key == KEY_ENTER))
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;	str -> Y+2
;	freq -> R16,R17
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0000 06AD 	{
; 0000 06AE 		freq = number_input(0,0,0,0);
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 06AF         if (freq > 2000)
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 06B0 			freq = 2000;
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 06B1         if (freq == 0)
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 06B2             freq = 1;
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 06B3 		// Disable Sampling Timer and what so ever
; 0000 06B4 		sampling_commence_disable();
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 0000 06B5         sampling_disable();
;PCODE: $00000535 VOL: 0
; 0000 06B6         dma_disable();
;PCODE: $00000536 VOL: 0
; 0000 06B7 		// Update sampling timer PER register
; 0000 06B8 		SAMPLING_TIMER_PER = _MCU_CLOCK_FREQUENCY_/1000/freq - 1;
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 1
; 0000 06B9 		// Enable Sampling Timer and what so ever
; 0000 06BA 		dma_init();
;PCODE: $0000053C VOL: 0
; 0000 06BB         sampling_enable();
;PCODE: $0000053D VOL: 0
; 0000 06BC         sampling_commence_enable();
;PCODE: $0000053E VOL: 0
; 0000 06BD 	}
; 0000 06BE     else if (current_menu_state == menu_state_calib)
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 06BF     {
; 0000 06C0         calibration_disable();
;PCODE: $00000544 VOL: 0
; 0000 06C1 		dma_init();
;PCODE: $00000545 VOL: 0
; 0000 06C2         sampling_enable();
;PCODE: $00000546 VOL: 0
; 0000 06C3         sampling_commence_enable();
;PCODE: $00000547 VOL: 0
; 0000 06C4         dac_enable();
;PCODE: $00000548 VOL: 0
; 0000 06C5     }
; 0000 06C6 	itoa(_MCU_CLOCK_FREQUENCY_/1000/(((unsigned long)(SAMPLING_TIMER_PER)) + 1),str);
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 1
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0000 06C7 	lcd_clear();
;PCODE: $00000553 VOL: 0
; 0000 06C8 	lcd_putsf("Sampling Freq =");
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0000 06C9 	lcd_gotoxy(0,1);
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 06CA 	lcd_puts(str);
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 06CB 	lcd_gotoxy(5,1);
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 06CC 	lcd_putsf("KHz");
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 06CD }
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;void menu_display_set_freq (void)
; 0000 06CF {
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0000 06D0 	if (current_menu_state != menu_state_set_freq)
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 06D1 	{
; 0000 06D2 		lcd_clear();
;PCODE: $00000570 VOL: 0
; 0000 06D3 		lcd_putsf("Set Samp Freq:");
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 06D4 		lcd_gotoxy(5,1);
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 06D5 		lcd_putsf("KHz");
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 06D6 		lcd_gotoxy(0,1);
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 06D7 	}
; 0000 06D8 	number_input(0,4,0,1);
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 06D9 }
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;
;float abs_to_dac_coeff0 = 255.0;

	.DSEG
;float abs_to_dac_coeff1 = -0.0001275;
;signed long int oscope_min = 0.0;
;unsigned long int oscope_div = 250000.0;
;void min_div_to_coeff (void)
; 0000 06E0 {

	.CSEG
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 06E1     abs_to_dac_coeff1 = -255.0/8.0/((float)(oscope_div));
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 06E2     abs_to_dac_coeff0 = 255.0 + ((float)(oscope_min))*255.0/8.0/((float)(oscope_div));
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
; 0000 06E3 }
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;#define UNIT_COUNT      4
;#define DIV_UNIT_UV		0
;#define DIV_UNIT_MV		1
;#define DIV_UNIT_DB		2
;#define DIV_UNIT_DBM    3
;#define LOG10IMPEDANCE	1.69897
;float abs_fft_uV (float input)
; 0000 06EB {
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 06EC     return pow(input,0.5)*1000000.0;
;PCODE: $000005A3 VOL: 0
;	input -> Y+0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 06ED }
;PCODE: $000005AC VOL: 0
;float abs_fft_mV (float input)
; 0000 06EF {
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 06F0     return pow(input,0.5)*1000.0;
;PCODE: $000005AF VOL: 0
;	input -> Y+0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 06F1 }
;PCODE: $000005B8 VOL: 0
;float abs_fft_dB (float input)
; 0000 06F3 {
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
; 0000 06F4     return 10.0*log10(input) - 10*LOG10IMPEDANCE;
;PCODE: $000005BB VOL: 0
;	input -> Y+0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0000 06F5 }
;PCODE: $000005C6 VOL: 0
;float abs_fft_dBm (float input)
; 0000 06F7 {
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 0000 06F8     return 10.0*log10(input) + (30.0 - 10*LOG10IMPEDANCE);
;PCODE: $000005C9 VOL: 0
;	input -> Y+0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 06F9 }
;PCODE: $000005D2 VOL: 0
;flash struct _units_
;{
;	signed long int min;
;	signed long int max;
;	char unit_msg[4];
;    unsigned char number_input_max_digits;
;	float (* abs_fft_fcn)(float input);
;} units[UNIT_COUNT] =
;{
;	{0,2000000,"uV ",7,
;	(float (*)(float)) abs_fft_uV},
;	{0,2000,"mV ",4,
;	(float (*)(float)) abs_fft_mV},
;	{-105 - ((signed long int)(10.0*LOG10IMPEDANCE)),10 - ((signed long int)(10.0*LOG10IMPEDANCE))
;    ,"dB ",4,(float (*)(float)) abs_fft_dB},
;	{-75 - ((signed long int)(10.0*LOG10IMPEDANCE)),40 - ((signed long int)(10.0*LOG10IMPEDANCE))
;    ,"dBm",4,(float (*)(float)) abs_fft_dBm}
;};
;unsigned char next_unit, current_unit = 0;
;void menu_display_show_div (void)
; 0000 070E {
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 070F 	char str[9];
; 0000 0710     if (number_input_number_cntr && (key == KEY_ENTER))
;PCODE: $000005D5 VOL: 0
;	str -> Y+0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 0711     {
; 0000 0712         oscope_div = number_input(0,0,0,0);
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0000 0713         if (8*oscope_div > (units[next_unit].max -  units[next_unit].min))
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0000 0714             oscope_div = (units[next_unit].max - units[next_unit].min)/8;
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
; 0000 0715         // Disable sampling
; 0000 0716         sampling_commence_disable();
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0000 0717         sampling_disable();
;PCODE: $00000610 VOL: 0
; 0000 0718         dma_disable();
;PCODE: $00000611 VOL: 0
; 0000 0719         // update coefficients
; 0000 071A         min_div_to_coeff();
;PCODE: $00000612 VOL: 0
; 0000 071B         current_unit = next_unit;
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 071C         // enable sampling
; 0000 071D         dma_init();
;PCODE: $00000615 VOL: 0
; 0000 071E         sampling_enable();
;PCODE: $00000616 VOL: 0
; 0000 071F         sampling_commence_enable();
;PCODE: $00000617 VOL: 0
; 0000 0720     }
; 0000 0721     ltoa(oscope_div,str);
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
; 0000 0722     lcd_clear();
;PCODE: $0000061D VOL: 0
; 0000 0723     lcd_putsf("PerDiv Val");
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 0724     lcd_gotoxy(0,1);
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 0725     lcd_puts(str);
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
; 0000 0726     lcd_putchar(' ');
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 0727     lcd_putsf(units[current_unit].unit_msg);
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 0728 }
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;void menu_display_set_div (void)
; 0000 072A {
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
; 0000 072B     if (key == KEY_UNITS)
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
; 0000 072C     {
; 0000 072D         lcd_gotoxy(units[next_unit].number_input_max_digits + 2,1);
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 072E         lcd_putsf("   ");
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
; 0000 072F         next_unit++;
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 0730         next_unit %= UNIT_COUNT;
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
; 0000 0731         lcd_gotoxy(units[next_unit].number_input_max_digits + 2,1);
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 0732         lcd_putsf(units[next_unit].unit_msg);
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 0733     }
; 0000 0734     else
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
; 0000 0735     {
; 0000 0736         if (current_menu_state != menu_state_set_div)
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
; 0000 0737         {
; 0000 0738             next_unit = current_unit;
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
; 0000 0739             lcd_clear();
;PCODE: $00000663 VOL: 0
; 0000 073A             lcd_putsf("Set PerDiv Val:");
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 073B             lcd_gotoxy(units[next_unit].number_input_max_digits + 2,1);
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
; 0000 073C             lcd_putsf(units[next_unit].unit_msg);
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 073D             lcd_gotoxy(1,1);
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
; 0000 073E         }
; 0000 073F         number_input(0,units[next_unit].number_input_max_digits,1,1);
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
; 0000 0740     }
;PCODE: $0000068A VOL: 0
; 0000 0741 }
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;
;void menu_display_show_min (void)
; 0000 0744 {
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0000 0745 	char str[9];
; 0000 0746     if (number_input_number_cntr && (key == KEY_ENTER))
;PCODE: $0000068F VOL: 0
;	str -> Y+0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
; 0000 0747     {
; 0000 0748         oscope_min = number_input(0,0,0,0);
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 0749         if (oscope_min < units[current_unit].min)
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 074A             oscope_min = units[current_unit].min;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 074B         else if (units[current_unit].min > (units[current_unit].max - 8*oscope_div))
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 074C             oscope_min = units[current_unit].max - 8*oscope_div;
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0000 074D         // Disable sampling
; 0000 074E         sampling_commence_disable();
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 074F         sampling_disable();
;PCODE: $000006D7 VOL: 0
; 0000 0750         dma_disable();
;PCODE: $000006D8 VOL: 0
; 0000 0751         // update coefficients
; 0000 0752         min_div_to_coeff();
;PCODE: $000006D9 VOL: 0
; 0000 0753         // enable sampling
; 0000 0754         dma_init();
;PCODE: $000006DA VOL: 0
; 0000 0755         sampling_enable();
;PCODE: $000006DB VOL: 0
; 0000 0756         sampling_commence_enable();
;PCODE: $000006DC VOL: 0
; 0000 0757     }
; 0000 0758     ltoa(oscope_min,str);
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
; 0000 0759     lcd_clear();
;PCODE: $000006E2 VOL: 0
; 0000 075A     lcd_putsf("Min Val");
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
; 0000 075B     lcd_gotoxy(0,1);
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
; 0000 075C     lcd_puts(str);
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
; 0000 075D     lcd_putchar(' ');
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
; 0000 075E     lcd_putsf(units[current_unit].unit_msg);
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 075F }
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;void menu_display_set_min (void)
; 0000 0761 {
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
; 0000 0762 	if (current_menu_state != menu_state_set_div)
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 0763     {
; 0000 0764         lcd_clear();
;PCODE: $000006FD VOL: 0
; 0000 0765         lcd_putsf("Set Min Val:");
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
; 0000 0766         lcd_gotoxy(units[current_unit].number_input_max_digits + 2,1);
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
; 0000 0767         lcd_putsf(units[current_unit].unit_msg);
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
; 0000 0768         lcd_gotoxy(1,1);
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0000 0769     }
; 0000 076A     number_input(1,units[current_unit].number_input_max_digits,1,1);
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
; 0000 076B }
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;
;unsigned char gain_index = 0;
;unsigned char next_gain_index;
;void menu_display_show_gain (void)
; 0000 0770 {
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 0771     char str[3];
; 0000 0772     if ((current_menu_state == menu_state_set_gain) && (gain_index != next_gain_index) && (key == KEY_ENTER))
;PCODE: $00000728 VOL: 0
;	str -> Y+0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
; 0000 0773     {
; 0000 0774         gain_index = next_gain_index;
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
; 0000 0775         // Disable sampeling
; 0000 0776         sampling_commence_disable();
;PCODE: $00000739 VOL: 0
; 0000 0777         sampling_disable();
;PCODE: $0000073A VOL: 0
; 0000 0778         dma_disable();
;PCODE: $0000073B VOL: 0
; 0000 0779         // re-init ADC
; 0000 077A         adca_init(gain_index << 2);
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
; 0000 077B         // Enable sampling
; 0000 077C         dma_init();
;PCODE: $00000740 VOL: 0
; 0000 077D         sampling_enable();
;PCODE: $00000741 VOL: 0
; 0000 077E         sampling_commence_enable();
;PCODE: $00000742 VOL: 0
; 0000 077F     }
; 0000 0780     itoa(1 << ((unsigned int)(gain_index)),str);
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
; 0000 0781     lcd_clear();
;PCODE: $0000074A VOL: 0
; 0000 0782     lcd_putsf("Gain = ");
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
; 0000 0783     lcd_puts(str);
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
; 0000 0784 }
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;void menu_display_set_gain (void)
; 0000 0786 {
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
; 0000 0787     unsigned char str[3];
; 0000 0788 	if (current_menu_state != menu_state_set_gain)
;PCODE: $00000755 VOL: 0
;	str -> Y+0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
; 0000 0789     {
; 0000 078A         next_gain_index = gain_index;
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
; 0000 078B         lcd_clear();
;PCODE: $0000075B VOL: 0
; 0000 078C         lcd_putsf("Set Gain: ");
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
; 0000 078D     }
; 0000 078E     else
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
; 0000 078F     {
; 0000 0790         if (key == KEY_RIGHT)
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
; 0000 0791         {
; 0000 0792             next_gain_index++;
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
; 0000 0793             next_gain_index %= 7;
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
; 0000 0794         }
; 0000 0795         else if (key == KEY_LEFT)
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
; 0000 0796         {
; 0000 0797             next_gain_index--;
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
; 0000 0798             if ((next_gain_index > 6))
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
; 0000 0799                 next_gain_index = 0;
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
; 0000 079A         }
;PCODE: $00000779 VOL: 0
; 0000 079B     }
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
; 0000 079C     lcd_gotoxy(10,0);
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
; 0000 079D     lcd_putsf("  ");
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
; 0000 079E     lcd_gotoxy(10,0);
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
; 0000 079F     itoa(1 << ((unsigned int)(next_gain_index)),str);
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
; 0000 07A0     lcd_puts(str);
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
; 0000 07A1 }
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;
;flash struct _menu_state_data_
;{
;	void (* menu_fcn)();
;	enum _menu_states_ menu_next_state[KEY_COUNT];
;} menu_state_data[9] =
;{
;	{
;		(void (*)()) menu_display_calib,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_freq,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_show_freq,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_gain,
;			menu_state_invalid_state,	menu_state_show_div,
;			menu_state_invalid_state,	menu_state_calib,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_set_freq,		menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_show_div,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_freq,
;			menu_state_invalid_state,	menu_state_show_min,
;			menu_state_invalid_state,	menu_state_calib,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_set_div,			menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_show_min,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_div,
;			menu_state_invalid_state,	menu_state_show_gain,
;			menu_state_invalid_state,	menu_state_calib,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_set_min,			menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_show_gain,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_min,
;			menu_state_invalid_state,	menu_state_show_freq,
;			menu_state_invalid_state,	menu_state_calib,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_set_gain,		menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_set_freq,
;		{
;			menu_state_set_freq,		menu_state_set_freq,
;			menu_state_set_freq,		menu_state_set_freq,
;			menu_state_set_freq,		menu_state_set_freq,
;			menu_state_set_freq,		menu_state_set_freq,
;			menu_state_set_freq,		menu_state_set_freq,
;			menu_state_set_freq,		menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_freq,
;			menu_state_show_freq,		menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_set_div,
;		{
;			menu_state_set_div,			menu_state_set_div,
;			menu_state_set_div,			menu_state_set_div,
;			menu_state_set_div,			menu_state_set_div,
;			menu_state_set_div,			menu_state_set_div,
;			menu_state_set_div,			menu_state_set_div,
;			menu_state_set_div,			menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_div,
;			menu_state_show_div,		menu_state_invalid_state}},
;	{
;		(void (*)()) menu_display_set_min,
;		{
;			menu_state_set_min,			menu_state_set_min,
;			menu_state_set_min,			menu_state_set_min,
;			menu_state_set_min,			menu_state_set_min,
;			menu_state_set_min,			menu_state_set_min,
;			menu_state_set_min,			menu_state_set_min,
;			menu_state_set_min,			menu_state_invalid_state,
;			menu_state_set_min,			menu_state_show_min,
;			menu_state_show_min,		menu_state_set_min}},
;	{
;		(void (*)()) menu_display_set_gain,
;		{
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_set_gain,
;			menu_state_invalid_state,	menu_state_set_gain,
;			menu_state_invalid_state,	menu_state_invalid_state,
;			menu_state_invalid_state,	menu_state_show_gain,
;			menu_state_show_gain,		menu_state_invalid_state}}
;};
;
;void KP_function (void)
; 0000 080F {
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
; 0000 0810     next_menu_state = menu_state_data[current_menu_state].menu_next_state[key];
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
; 0000 0811 	if (next_menu_state != menu_state_invalid_state)
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
; 0000 0812     {
; 0000 0813 		(*menu_state_data[next_menu_state].menu_fcn)();
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
; 0000 0814         current_menu_state = next_menu_state;
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
; 0000 0815     }
; 0000 0816 }
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;
;// PORTD interrupt 0 service routine
;interrupt [PORTD_INT0_vect] void portd_int0_isr(void)
; 0000 081A {
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
; 0000 081B // write your code here
; 0000 081C     key_col_pos_temp = ((PORTD.IN >> 4) & 0x0F); // record temporary column
;PCODE: $000007B0 VOL: 1
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
; 0000 081D     PORTD.INT0MASK = 0x00; // disable keypad port interrupt
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 1
; 0000 081E     PORTD.INTFLAGS = 0x01;
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 1
; 0000 081F     TCF0.CNT = 0x0000; // clear keypad timer counter
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 1
; 0000 0820     TCF0.CTRLA = (TCF0.CTRLA & (~TC1_CLKSEL_gm)) | TC_CLKSEL_DIV64_gc; // enable timer counting
;PCODE: $000007BA VOL: 1
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 1
; 0000 0821 }
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;
;// Timer/counter TCF0 Overflow/Underflow interrupt service routine
;interrupt [TCF0_OVF_vect] void tcf0_overflow_isr(void)
; 0000 0825 {
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
; 0000 0826 // write your code here
; 0000 0827     TCF0.CTRLA = 0x00; // disable keypad timer counting
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 1
; 0000 0828     TCF0.CNT = 0x0001;
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 1
; 0000 0829     if (((PORTD.IN >> 4) & 0x0F) == key_col_pos_temp)
;PCODE: $000007C7 VOL: 1
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
; 0000 082A     {
; 0000 082B         PORTD.DIR = 0xF0;
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 1
; 0000 082C         PORTD.OUT = 0xF0;
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 1
; 0000 082D         key_row_pos = PORTD.IN & 0x0F;
;PCODE: $000007D4 VOL: 1
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
; 0000 082E         switch (key_col_pos_temp)
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
; 0000 082F         {
; 0000 0830         case 0x01:
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
; 0000 0831             key_col_pos = 0;
;PCODE: $000007DB VOL: 0
; 0000 0832             break;
;PCODE: $000007DC VOL: 0
; 0000 0833         case 0x02:
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
; 0000 0834             key_col_pos = 1;
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
; 0000 0835             break;
;PCODE: $000007E2 VOL: 0
; 0000 0836         case 0x04:
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
; 0000 0837             key_col_pos = 2;
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
; 0000 0838             break;
;PCODE: $000007E8 VOL: 0
; 0000 0839         case 0x08:
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
; 0000 083A             key_col_pos = 3;
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
; 0000 083B             break;
;PCODE: $000007EE VOL: 0
; 0000 083C         }
;PCODE: $000007EF VOL: 0
; 0000 083D         switch ((~key_row_pos) & 0x0F)
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
; 0000 083E         {
; 0000 083F         case 0x01:
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
; 0000 0840             key_row_pos = 0;
;PCODE: $000007F6 VOL: 0
; 0000 0841             break;
;PCODE: $000007F7 VOL: 0
; 0000 0842         case 0x02:
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
; 0000 0843             key_row_pos = 1;
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
; 0000 0844             break;
;PCODE: $000007FD VOL: 0
; 0000 0845         case 0x04:
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
; 0000 0846             key_row_pos = 2;
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; 0000 0847             break;
;PCODE: $00000803 VOL: 0
; 0000 0848         case 0x08:
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
; 0000 0849             key_row_pos = 3;
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0000 084A             break;
;PCODE: $00000809 VOL: 0
; 0000 084B         }
;PCODE: $0000080A VOL: 0
; 0000 084C         key_pos = 0x0F & (key_row_pos | (key_col_pos << 0x02));
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
; 0000 084D 		key = key_pos_to_key[key_pos];
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
; 0000 084E         KP_function();
;PCODE: $00000815 VOL: 0
; 0000 084F     }
; 0000 0850     PORTD.DIR = 0x0F;
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 1
; 0000 0851     PORTD.OUT = 0x0F;
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 1
; 0000 0852     PORTD.INTFLAGS = 0x01;
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 1
; 0000 0853     PORTD.INT0MASK = 0xF0;
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 1
; 0000 0854 }
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;
;//______________________________________________________________FFT_FUNCTIONS_&_VARIABLES_______________________________________
;
;inline void add (complex *x, complex y)
; 0000 0859 {
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
; 0000 085A     x->real += y.real;
;	*x -> Y+8
;	y -> Y+0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
; 0000 085B     x->imag += y.imag;
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
; 0000 085C     return;
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
; 0000 085D }
;PCODE: $00000836 VOL: 0
;
;inline void mul (complex *x, complex y)
; 0000 0860 {
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
; 0000 0861     float temp;
; 0000 0862     temp = x->real*y.real - x->imag*y.imag;
;PCODE: $00000839 VOL: 0
;	*x -> Y+12
;	y -> Y+4
;	temp -> Y+0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
; 0000 0863     x->imag = x->imag*y.real + x->real*y.imag;
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
; 0000 0864     x->real = temp;
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
; 0000 0865     return;
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
; 0000 0866 }
;PCODE: $00000859 VOL: 0
;
;inline void neg (complex *x)
; 0000 0869 {
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
; 0000 086A     x->real = -x->real;
;PCODE: $0000085C VOL: 0
;	*x -> Y+0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
; 0000 086B     x->imag = -x->imag;
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
; 0000 086C     return;
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
; 0000 086D }
;PCODE: $0000086A VOL: 0
;
;flash complex W[fft_N] =
;{
;    {1.0,0.0},
;    {0.99992472,0.01227153838},
;    {0.99969882,0.02454122901},
;    {0.99932235,0.0368072242},
;    {0.99879545,0.0490676761},
;    {0.9981181,0.061320737},
;    {0.99729043,0.0735645667},
;    {0.99631262,0.0857973099},
;    {0.99518472,0.0980171412},
;    {0.99390697,0.110222206},
;    {0.99247956,0.122410677},
;    {0.99090266,0.134580702},
;    {0.98917651,0.146730468},
;    {0.98730141,0.15885815},
;    {0.98527765,0.170961887},
;    {0.98310548,0.183039889},
;    {0.98078525,0.195090324},
;    {0.97831738,0.207111374},
;    {0.97570211,0.219101235},
;    {0.97293997,0.231058106},
;    {0.97003126,0.242980182},
;    {0.96697646,0.254865646},
;    {0.96377605,0.266712755},
;    {0.9604305,0.27851969},
;    {0.95694035,0.290284663},
;    {0.95330602,0.302005947},
;    {0.94952816,0.313681751},
;    {0.9456073,0.32531029},
;    {0.94154406,0.33688986},
;    {0.93733901,0.34841868},
;    {0.93299282,0.35989505},
;    {0.92850608,0.37131721},
;    {0.9238795,0.38268343},
;    {0.91911387,0.39399204},
;    {0.91420978,0.40524131},
;    {0.909168,0.41642955},
;    {0.90398932,0.42755508},
;    {0.89867449,0.43861625},
;    {0.8932243,0.44961134},
;    {0.88763964,0.46053872},
;    {0.88192129,0.47139674},
;    {0.87607008,0.48218378},
;    {0.87008697,0.4928982},
;    {0.86397284,0.50353837},
;    {0.8577286,0.51410276},
;    {0.8513552,0.52458966},
;    {0.84485358,0.53499764},
;    {0.83822471,0.54532498},
;    {0.8314696,0.55557024},
;    {0.82458931,0.56573182},
;    {0.81758481,0.57580817},
;    {0.81045717,0.58579785},
;    {0.80320752,0.59569931},
;    {0.79583693,0.60551107},
;    {0.78834641,0.61523157},
;    {0.78073722,0.62485951},
;    {0.77301043,0.63439327},
;    {0.76516724,0.64383155},
;    {0.75720882,0.65317285},
;    {0.74913639,0.6624158},
;    {0.74095112,0.67155898},
;    {0.73265427,0.680601},
;    {0.7242471,0.68954057},
;    {0.71573085,0.69837624},
;    {0.70710677,0.70710677},
;    {0.69837624,0.71573085},
;    {0.68954057,0.7242471},
;    {0.680601,0.73265427},
;    {0.67155898,0.74095112},
;    {0.6624158,0.74913639},
;    {0.65317285,0.75720882},
;    {0.64383155,0.76516724},
;    {0.63439327,0.77301043},
;    {0.62485951,0.78073722},
;    {0.61523157,0.78834641},
;    {0.60551107,0.79583693},
;    {0.59569931,0.80320752},
;    {0.58579785,0.81045717},
;    {0.57580817,0.81758481},
;    {0.56573182,0.82458931},
;    {0.55557024,0.8314696},
;    {0.54532498,0.83822471},
;    {0.53499764,0.84485358},
;    {0.52458966,0.8513552},
;    {0.51410276,0.8577286},
;    {0.50353837,0.86397284},
;    {0.4928982,0.87008697},
;    {0.48218378,0.87607008},
;    {0.47139674,0.88192129},
;    {0.46053872,0.88763964},
;    {0.44961134,0.8932243},
;    {0.43861625,0.89867449},
;    {0.42755508,0.90398932},
;    {0.41642955,0.909168},
;    {0.40524131,0.91420978},
;    {0.39399204,0.91911387},
;    {0.38268343,0.9238795},
;    {0.37131721,0.92850608},
;    {0.35989505,0.93299282},
;    {0.34841868,0.93733901},
;    {0.33688986,0.94154406},
;    {0.32531029,0.9456073},
;    {0.313681751,0.94952816},
;    {0.302005947,0.95330602},
;    {0.290284663,0.95694035},
;    {0.27851969,0.9604305},
;    {0.266712755,0.96377605},
;    {0.254865646,0.96697646},
;    {0.242980182,0.97003126},
;    {0.231058106,0.97293997},
;    {0.219101235,0.97570211},
;    {0.207111374,0.97831738},
;    {0.195090324,0.98078525},
;    {0.183039889,0.98310548},
;    {0.170961887,0.98527765},
;    {0.15885815,0.98730141},
;    {0.146730468,0.98917651},
;    {0.134580702,0.99090266},
;    {0.122410677,0.99247956},
;    {0.110222206,0.99390697},
;    {0.0980171412,0.99518472},
;    {0.0857973099,0.99631262},
;    {0.0735645667,0.99729043},
;    {0.061320737,0.9981181},
;    {0.0490676761,0.99879545},
;    {0.0368072242,0.99932235},
;    {0.02454122901,0.99969882},
;    {0.01227153838,0.99992472},
;    {0.0,1.0},
;    {-0.01227153838,0.99992472},
;    {-0.02454122901,0.99969882},
;    {-0.0368072242,0.99932235},
;    {-0.0490676761,0.99879545},
;    {-0.061320737,0.9981181},
;    {-0.0735645667,0.99729043},
;    {-0.0857973099,0.99631262},
;    {-0.0980171412,0.99518472},
;    {-0.110222206,0.99390697},
;    {-0.122410677,0.99247956},
;    {-0.134580702,0.99090266},
;    {-0.146730468,0.98917651},
;    {-0.15885815,0.98730141},
;    {-0.170961887,0.98527765},
;    {-0.183039889,0.98310548},
;    {-0.195090324,0.98078525},
;    {-0.207111374,0.97831738},
;    {-0.219101235,0.97570211},
;    {-0.231058106,0.97293997},
;    {-0.242980182,0.97003126},
;    {-0.254865646,0.96697646},
;    {-0.266712755,0.96377605},
;    {-0.27851969,0.9604305},
;    {-0.290284663,0.95694035},
;    {-0.302005947,0.95330602},
;    {-0.313681751,0.94952816},
;    {-0.32531029,0.9456073},
;    {-0.33688986,0.94154406},
;    {-0.34841868,0.93733901},
;    {-0.35989505,0.93299282},
;    {-0.37131721,0.92850608},
;    {-0.38268343,0.9238795},
;    {-0.39399204,0.91911387},
;    {-0.40524131,0.91420978},
;    {-0.41642955,0.909168},
;    {-0.42755508,0.90398932},
;    {-0.43861625,0.89867449},
;    {-0.44961134,0.8932243},
;    {-0.46053872,0.88763964},
;    {-0.47139674,0.88192129},
;    {-0.48218378,0.87607008},
;    {-0.4928982,0.87008697},
;    {-0.50353837,0.86397284},
;    {-0.51410276,0.8577286},
;    {-0.52458966,0.8513552},
;    {-0.53499764,0.84485358},
;    {-0.54532498,0.83822471},
;    {-0.55557024,0.8314696},
;    {-0.56573182,0.82458931},
;    {-0.57580817,0.81758481},
;    {-0.58579785,0.81045717},
;    {-0.59569931,0.80320752},
;    {-0.60551107,0.79583693},
;    {-0.61523157,0.78834641},
;    {-0.62485951,0.78073722},
;    {-0.63439327,0.77301043},
;    {-0.64383155,0.76516724},
;    {-0.65317285,0.75720882},
;    {-0.6624158,0.74913639},
;    {-0.67155898,0.74095112},
;    {-0.680601,0.73265427},
;    {-0.68954057,0.7242471},
;    {-0.69837624,0.71573085},
;    {-0.70710677,0.70710677},
;    {-0.71573085,0.69837624},
;    {-0.7242471,0.68954057},
;    {-0.73265427,0.680601},
;    {-0.74095112,0.67155898},
;    {-0.74913639,0.6624158},
;    {-0.75720882,0.65317285},
;    {-0.76516724,0.64383155},
;    {-0.77301043,0.63439327},
;    {-0.78073722,0.62485951},
;    {-0.78834641,0.61523157},
;    {-0.79583693,0.60551107},
;    {-0.80320752,0.59569931},
;    {-0.81045717,0.58579785},
;    {-0.81758481,0.57580817},
;    {-0.82458931,0.56573182},
;    {-0.8314696,0.55557024},
;    {-0.83822471,0.54532498},
;    {-0.84485358,0.53499764},
;    {-0.8513552,0.52458966},
;    {-0.8577286,0.51410276},
;    {-0.86397284,0.50353837},
;    {-0.87008697,0.4928982},
;    {-0.87607008,0.48218378},
;    {-0.88192129,0.47139674},
;    {-0.88763964,0.46053872},
;    {-0.8932243,0.44961134},
;    {-0.89867449,0.43861625},
;    {-0.90398932,0.42755508},
;    {-0.909168,0.41642955},
;    {-0.91420978,0.40524131},
;    {-0.91911387,0.39399204},
;    {-0.9238795,0.38268343},
;    {-0.92850608,0.37131721},
;    {-0.93299282,0.35989505},
;    {-0.93733901,0.34841868},
;    {-0.94154406,0.33688986},
;    {-0.9456073,0.32531029},
;    {-0.94952816,0.313681751},
;    {-0.95330602,0.302005947},
;    {-0.95694035,0.290284663},
;    {-0.9604305,0.27851969},
;    {-0.96377605,0.266712755},
;    {-0.96697646,0.254865646},
;    {-0.97003126,0.242980182},
;    {-0.97293997,0.231058106},
;    {-0.97570211,0.219101235},
;    {-0.97831738,0.207111374},
;    {-0.98078525,0.195090324},
;    {-0.98310548,0.183039889},
;    {-0.98527765,0.170961887},
;    {-0.98730141,0.15885815},
;    {-0.98917651,0.146730468},
;    {-0.99090266,0.134580702},
;    {-0.99247956,0.122410677},
;    {-0.99390697,0.110222206},
;    {-0.99518472,0.0980171412},
;    {-0.99631262,0.0857973099},
;    {-0.99729043,0.0735645667},
;    {-0.9981181,0.061320737},
;    {-0.99879545,0.0490676761},
;    {-0.99932235,0.0368072242},
;    {-0.99969882,0.02454122901},
;    {-0.99992472,0.01227153838},
;    {-1.0,0.0},
;    {-0.99992472,-0.01227153838},
;    {-0.99969882,-0.02454122901},
;    {-0.99932235,-0.0368072242},
;    {-0.99879545,-0.0490676761},
;    {-0.9981181,-0.061320737},
;    {-0.99729043,-0.0735645667},
;    {-0.99631262,-0.0857973099},
;    {-0.99518472,-0.0980171412},
;    {-0.99390697,-0.110222206},
;    {-0.99247956,-0.122410677},
;    {-0.99090266,-0.134580702},
;    {-0.98917651,-0.146730468},
;    {-0.98730141,-0.15885815},
;    {-0.98527765,-0.170961887},
;    {-0.98310548,-0.183039889},
;    {-0.98078525,-0.195090324},
;    {-0.97831738,-0.207111374},
;    {-0.97570211,-0.219101235},
;    {-0.97293997,-0.231058106},
;    {-0.97003126,-0.242980182},
;    {-0.96697646,-0.254865646},
;    {-0.96377605,-0.266712755},
;    {-0.9604305,-0.27851969},
;    {-0.95694035,-0.290284663},
;    {-0.95330602,-0.302005947},
;    {-0.94952816,-0.313681751},
;    {-0.9456073,-0.32531029},
;    {-0.94154406,-0.33688986},
;    {-0.93733901,-0.34841868},
;    {-0.93299282,-0.35989505},
;    {-0.92850608,-0.37131721},
;    {-0.9238795,-0.38268343},
;    {-0.91911387,-0.39399204},
;    {-0.91420978,-0.40524131},
;    {-0.909168,-0.41642955},
;    {-0.90398932,-0.42755508},
;    {-0.89867449,-0.43861625},
;    {-0.8932243,-0.44961134},
;    {-0.88763964,-0.46053872},
;    {-0.88192129,-0.47139674},
;    {-0.87607008,-0.48218378},
;    {-0.87008697,-0.4928982},
;    {-0.86397284,-0.50353837},
;    {-0.8577286,-0.51410276},
;    {-0.8513552,-0.52458966},
;    {-0.84485358,-0.53499764},
;    {-0.83822471,-0.54532498},
;    {-0.8314696,-0.55557024},
;    {-0.82458931,-0.56573182},
;    {-0.81758481,-0.57580817},
;    {-0.81045717,-0.58579785},
;    {-0.80320752,-0.59569931},
;    {-0.79583693,-0.60551107},
;    {-0.78834641,-0.61523157},
;    {-0.78073722,-0.62485951},
;    {-0.77301043,-0.63439327},
;    {-0.76516724,-0.64383155},
;    {-0.75720882,-0.65317285},
;    {-0.74913639,-0.6624158},
;    {-0.74095112,-0.67155898},
;    {-0.73265427,-0.680601},
;    {-0.7242471,-0.68954057},
;    {-0.71573085,-0.69837624},
;    {-0.70710677,-0.70710677},
;    {-0.69837624,-0.71573085},
;    {-0.68954057,-0.7242471},
;    {-0.680601,-0.73265427},
;    {-0.67155898,-0.74095112},
;    {-0.6624158,-0.74913639},
;    {-0.65317285,-0.75720882},
;    {-0.64383155,-0.76516724},
;    {-0.63439327,-0.77301043},
;    {-0.62485951,-0.78073722},
;    {-0.61523157,-0.78834641},
;    {-0.60551107,-0.79583693},
;    {-0.59569931,-0.80320752},
;    {-0.58579785,-0.81045717},
;    {-0.57580817,-0.81758481},
;    {-0.56573182,-0.82458931},
;    {-0.55557024,-0.8314696},
;    {-0.54532498,-0.83822471},
;    {-0.53499764,-0.84485358},
;    {-0.52458966,-0.8513552},
;    {-0.51410276,-0.8577286},
;    {-0.50353837,-0.86397284},
;    {-0.4928982,-0.87008697},
;    {-0.48218378,-0.87607008},
;    {-0.47139674,-0.88192129},
;    {-0.46053872,-0.88763964},
;    {-0.44961134,-0.8932243},
;    {-0.43861625,-0.89867449},
;    {-0.42755508,-0.90398932},
;    {-0.41642955,-0.909168},
;    {-0.40524131,-0.91420978},
;    {-0.39399204,-0.91911387},
;    {-0.38268343,-0.9238795},
;    {-0.37131721,-0.92850608},
;    {-0.35989505,-0.93299282},
;    {-0.34841868,-0.93733901},
;    {-0.33688986,-0.94154406},
;    {-0.32531029,-0.9456073},
;    {-0.313681751,-0.94952816},
;    {-0.302005947,-0.95330602},
;    {-0.290284663,-0.95694035},
;    {-0.27851969,-0.9604305},
;    {-0.266712755,-0.96377605},
;    {-0.254865646,-0.96697646},
;    {-0.242980182,-0.97003126},
;    {-0.231058106,-0.97293997},
;    {-0.219101235,-0.97570211},
;    {-0.207111374,-0.97831738},
;    {-0.195090324,-0.98078525},
;    {-0.183039889,-0.98310548},
;    {-0.170961887,-0.98527765},
;    {-0.15885815,-0.98730141},
;    {-0.146730468,-0.98917651},
;    {-0.134580702,-0.99090266},
;    {-0.122410677,-0.99247956},
;    {-0.110222206,-0.99390697},
;    {-0.0980171412,-0.99518472},
;    {-0.0857973099,-0.99631262},
;    {-0.0735645667,-0.99729043},
;    {-0.061320737,-0.9981181},
;    {-0.0490676761,-0.99879545},
;    {-0.0368072242,-0.99932235},
;    {-0.02454122901,-0.99969882},
;    {-0.01227153838,-0.99992472},
;    {0.0,-1.0},
;    {0.01227153838,-0.99992472},
;    {0.02454122901,-0.99969882},
;    {0.0368072242,-0.99932235},
;    {0.0490676761,-0.99879545},
;    {0.061320737,-0.9981181},
;    {0.0735645667,-0.99729043},
;    {0.0857973099,-0.99631262},
;    {0.0980171412,-0.99518472},
;    {0.110222206,-0.99390697},
;    {0.122410677,-0.99247956},
;    {0.134580702,-0.99090266},
;    {0.146730468,-0.98917651},
;    {0.15885815,-0.98730141},
;    {0.170961887,-0.98527765},
;    {0.183039889,-0.98310548},
;    {0.195090324,-0.98078525},
;    {0.207111374,-0.97831738},
;    {0.219101235,-0.97570211},
;    {0.231058106,-0.97293997},
;    {0.242980182,-0.97003126},
;    {0.254865646,-0.96697646},
;    {0.266712755,-0.96377605},
;    {0.27851969,-0.9604305},
;    {0.290284663,-0.95694035},
;    {0.302005947,-0.95330602},
;    {0.313681751,-0.94952816},
;    {0.32531029,-0.9456073},
;    {0.33688986,-0.94154406},
;    {0.34841868,-0.93733901},
;    {0.35989505,-0.93299282},
;    {0.37131721,-0.92850608},
;    {0.38268343,-0.9238795},
;    {0.39399204,-0.91911387},
;    {0.40524131,-0.91420978},
;    {0.41642955,-0.909168},
;    {0.42755508,-0.90398932},
;    {0.43861625,-0.89867449},
;    {0.44961134,-0.8932243},
;    {0.46053872,-0.88763964},
;    {0.47139674,-0.88192129},
;    {0.48218378,-0.87607008},
;    {0.4928982,-0.87008697},
;    {0.50353837,-0.86397284},
;    {0.51410276,-0.8577286},
;    {0.52458966,-0.8513552},
;    {0.53499764,-0.84485358},
;    {0.54532498,-0.83822471},
;    {0.55557024,-0.8314696},
;    {0.56573182,-0.82458931},
;    {0.57580817,-0.81758481},
;    {0.58579785,-0.81045717},
;    {0.59569931,-0.80320752},
;    {0.60551107,-0.79583693},
;    {0.61523157,-0.78834641},
;    {0.62485951,-0.78073722},
;    {0.63439327,-0.77301043},
;    {0.64383155,-0.76516724},
;    {0.65317285,-0.75720882},
;    {0.6624158,-0.74913639},
;    {0.67155898,-0.74095112},
;    {0.680601,-0.73265427},
;    {0.68954057,-0.7242471},
;    {0.69837624,-0.71573085},
;    {0.70710677,-0.70710677},
;    {0.71573085,-0.69837624},
;    {0.7242471,-0.68954057},
;    {0.73265427,-0.680601},
;    {0.74095112,-0.67155898},
;    {0.74913639,-0.6624158},
;    {0.75720882,-0.65317285},
;    {0.76516724,-0.64383155},
;    {0.77301043,-0.63439327},
;    {0.78073722,-0.62485951},
;    {0.78834641,-0.61523157},
;    {0.79583693,-0.60551107},
;    {0.80320752,-0.59569931},
;    {0.81045717,-0.58579785},
;    {0.81758481,-0.57580817},
;    {0.82458931,-0.56573182},
;    {0.8314696,-0.55557024},
;    {0.83822471,-0.54532498},
;    {0.84485358,-0.53499764},
;    {0.8513552,-0.52458966},
;    {0.8577286,-0.51410276},
;    {0.86397284,-0.50353837},
;    {0.87008697,-0.4928982},
;    {0.87607008,-0.48218378},
;    {0.88192129,-0.47139674},
;    {0.88763964,-0.46053872},
;    {0.8932243,-0.44961134},
;    {0.89867449,-0.43861625},
;    {0.90398932,-0.42755508},
;    {0.909168,-0.41642955},
;    {0.91420978,-0.40524131},
;    {0.91911387,-0.39399204},
;    {0.9238795,-0.38268343},
;    {0.92850608,-0.37131721},
;    {0.93299282,-0.35989505},
;    {0.93733901,-0.34841868},
;    {0.94154406,-0.33688986},
;    {0.9456073,-0.32531029},
;    {0.94952816,-0.313681751},
;    {0.95330602,-0.302005947},
;    {0.95694035,-0.290284663},
;    {0.9604305,-0.27851969},
;    {0.96377605,-0.266712755},
;    {0.96697646,-0.254865646},
;    {0.97003126,-0.242980182},
;    {0.97293997,-0.231058106},
;    {0.97570211,-0.219101235},
;    {0.97831738,-0.207111374},
;    {0.98078525,-0.195090324},
;    {0.98310548,-0.183039889},
;    {0.98527765,-0.170961887},
;    {0.98730141,-0.15885815},
;    {0.98917651,-0.146730468},
;    {0.99090266,-0.134580702},
;    {0.99247956,-0.122410677},
;    {0.99390697,-0.110222206},
;    {0.99518472,-0.0980171412},
;    {0.99631262,-0.0857973099},
;    {0.99729043,-0.0735645667},
;    {0.9981181,-0.061320737},
;    {0.99879545,-0.0490676761},
;    {0.99932235,-0.0368072242},
;    {0.99969882,-0.02454122901},
;    {0.99992472,-0.01227153838}
;};
;
;inline void mul_Wi (complex *x, unsigned int i)
; 0000 0A74 {
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
; 0000 0A75     complex temp;
; 0000 0A76     temp.real = W[i].real;
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;	*x -> Y+10
;	i -> Y+8
;	temp -> Y+0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
; 0000 0A77     temp.imag = W[i].imag;
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
; 0000 0A78     mul(x,temp);
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
; 0000 0A79     return;
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
; 0000 0A7A }
;PCODE: $00000881 VOL: 0
;
;inline void butterfly (complex *x0, complex *x1, unsigned int i)
; 0000 0A7D {
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
; 0000 0A7E 	complex temp;
; 0000 0A7F 	mul_Wi(x1,i);
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;	*x0 -> Y+12
;	*x1 -> Y+10
;	i -> Y+8
;	temp -> Y+0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
; 0000 0A80 	temp = *x0;
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
; 0000 0A81 	add(x0,*x1);
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
; 0000 0A82 	neg(x1);
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
; 0000 0A83 	add(x1,temp);
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
; 0000 0A84 	return;
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
; 0000 0A85 }
;PCODE: $0000089B VOL: 0
;
;inline void fft (void)
; 0000 0A88 {
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
; 0000 0A89 	unsigned int i, j, x1i,x2i,index;
; 0000 0A8A 	for (i = 0; i < radix; i++)
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;	i -> R16,R17
;	j -> R18,R19
;	x1i -> R20,R21
;	x2i -> Y+8
;	index -> Y+6
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
; 0000 0A8B 		for (j = 0; j < (1 << (radix - 1)); j++)
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
; 0000 0A8C 		{
; 0000 0A8D 			x1i = (((((unsigned int)(1)) << i) - 1) & j) | ((~((((unsigned int)(1)) << (i + 1)) - 1)) & (j << 1));
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0000 0A8E 			x2i = x1i | (((unsigned int)(1)) << i);
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
; 0000 0A8F 			index = (j*(1 << ((radix - 1) - i))) & ((fft_N >> 1) - 1);
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
; 0000 0A90 			butterfly(&(fft_adc.fft_results[x1i]),&(fft_adc.fft_results[x2i]),index);
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
; 0000 0A91 		}
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
; 0000 0A92 }
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;
;#pragma warn-
;unsigned int anagram (unsigned int x)
; 0000 0A96 {
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
; 0000 0A97 #asm
;PCODE: $000008EB VOL: 0
;	x -> Y+0
;PCODE: $000008EC VOL: 0
; 0000 0A98 	push r26
	push r26
;PCODE: $000008ED VOL: 0
; 0000 0A99 	push r27
	push r27
;PCODE: $000008EE VOL: 0
; 0000 0A9A 	push r28
	push r28
;PCODE: $000008EF VOL: 0
; 0000 0A9B 	ld r26,y
	ld r26,y
;PCODE: $000008F0 VOL: 0
; 0000 0A9C 	ldd r27,y+1
	ldd r27,y+1
;PCODE: $000008F1 VOL: 0
; 0000 0A9D 	clr r30
	clr r30
;PCODE: $000008F2 VOL: 0
; 0000 0A9E 	clr r31
	clr r31
;PCODE: $000008F3 VOL: 0
; 0000 0A9F 	ldi r28,LOW(9)
	ldi r28,LOW(9)
;PCODE: $000008F4 VOL: 0
; 0000 0AA0 anagram_loop:
anagram_loop:
;PCODE: $000008F5 VOL: 0
; 0000 0AA1 	ror r27
	ror r27
;PCODE: $000008F6 VOL: 0
; 0000 0AA2 	ror r26
	ror r26
;PCODE: $000008F7 VOL: 0
; 0000 0AA3 	rol r30
	rol r30
;PCODE: $000008F8 VOL: 0
; 0000 0AA4 	rol r31
	rol r31
;PCODE: $000008F9 VOL: 0
; 0000 0AA5 	dec r28
	dec r28
;PCODE: $000008FA VOL: 0
; 0000 0AA6 	brne anagram_loop
	brne anagram_loop
;PCODE: $000008FB VOL: 0
; 0000 0AA7 	pop r28
	pop r28
;PCODE: $000008FC VOL: 0
; 0000 0AA8 	pop r27
	pop r27
;PCODE: $000008FD VOL: 0
; 0000 0AA9 	pop r26
	pop r26
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
; 0000 0AAA #endasm
; 0000 0AAB }
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;#pragma warn+
;
;inline void rearrange_adc_data (void)
; 0000 0AAF {
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
; 0000 0AB0     unsigned int i;
; 0000 0AB1     for (i = 0; i < fft_N; i++)
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;	i -> R16,R17
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
; 0000 0AB2         fft_adc.adc_data[i] = fft_adc.adc_data[fft_N + anagram(i)];
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
; 0000 0AB3 }
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;
;inline void cast_to_complex (void)
; 0000 0AB6 {
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
; 0000 0AB7 	signed int i;
; 0000 0AB8 	for (i = fft_N - 1; i >= 0; i--)
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;	i -> R16,R17
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
; 0000 0AB9 	{
; 0000 0ABA 		fft_adc.fft_results[i].real = ((float)(fft_adc.adc_data[i] - adca_offset))*
; 0000 0ABB             Vref/2048.0/((float)(((unsigned int)(1)) << gain_index))/fft_N;
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
; 0000 0ABC 		fft_adc.fft_results[i].imag = 0.0;
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
; 0000 0ABD 	}
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 0ABE }
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;
;inline void abs_fft (void)
; 0000 0AC1 {
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
; 0000 0AC2     unsigned int i;
; 0000 0AC3     for (i = 0; i < (fft_N >> 1); i++)
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;	i -> R16,R17
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
; 0000 0AC4         fft_adc.fft_abs[i] =
; 0000 0AC5             (*units[current_unit].abs_fft_fcn)(fft_adc.fft_results[i].real*fft_adc.fft_results[i].real +
; 0000 0AC6             fft_adc.fft_results[i].imag*fft_adc.fft_results[i].imag);
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
; 0000 0AC7 }
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;
;inline void convert_for_dac (void)
; 0000 0ACA {
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 0ACB     unsigned int i;
; 0000 0ACC     for (i = 0; i < (fft_N >> 1); i++)
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;	i -> R16,R17
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
; 0000 0ACD         fft_adc.fft_abs[i] = abs_to_dac_coeff1*fft_adc.fft_abs[i] + abs_to_dac_coeff0;
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
; 0000 0ACE }
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;
;signed int nearest_si (float input)
; 0000 0AD1 {
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
; 0000 0AD2     if (input >= 32766.5)
;PCODE: $000009C8 VOL: 0
;	input -> Y+0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
; 0000 0AD3         return 32767;
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
; 0000 0AD4     if (input < -32767.5)
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 0AD5         return -32768;
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
; 0000 0AD6     if (input >= 0)
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
; 0000 0AD7     {
; 0000 0AD8         if ((input - floor(input)) < 0.5)
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
; 0000 0AD9             return ((signed int)(input));
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
; 0000 0ADA         return ((signed int)(input)) + 1;
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
; 0000 0ADB     }
; 0000 0ADC     if ((input - floor(input)) < 0.5)
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0000 0ADD         return ((signed int)(input)) - 1;
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
; 0000 0ADE     return ((signed int)(input));
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
; 0000 0ADF }
;PCODE: $00000A03 VOL: 0
;
;unsigned char ucmax (float input1, float input2)
; 0000 0AE2 {
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
; 0000 0AE3     if (input1 > input2)
;PCODE: $00000A06 VOL: 0
;	input1 -> Y+4
;	input2 -> Y+0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
; 0000 0AE4     {
; 0000 0AE5         if (input1 > 255.0)
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
; 0000 0AE6             return 255;
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
; 0000 0AE7         if (input1 < 0.0)
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
; 0000 0AE8             return 0;
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
; 0000 0AE9         return nearest_si(input1);
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
; 0000 0AEA     }
; 0000 0AEB     if (input2 > 255.0)
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
; 0000 0AEC         return 255;
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
; 0000 0AED     if (input2 < 0.0)
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
; 0000 0AEE         return 0;
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
; 0000 0AEF     return nearest_si(input2);
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
; 0000 0AF0 }
;PCODE: $00000A32 VOL: 0
;
;unsigned char ucmin (float input1, float input2)
; 0000 0AF3 {
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
; 0000 0AF4     if (input1 < input2)
;PCODE: $00000A35 VOL: 0
;	input1 -> Y+4
;	input2 -> Y+0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
; 0000 0AF5     {
; 0000 0AF6         if (input1 > 255.0)
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
; 0000 0AF7             return 255;
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
; 0000 0AF8         if (input1 < 0.0)
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
; 0000 0AF9             return 0;
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
; 0000 0AFA         return nearest_si(input1);
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;PCODE: $00000A4B VOL: 0
;PCODE: $00000A4C VOL: 0
; 0000 0AFB     }
; 0000 0AFC     if (input2 > 255.0)
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
; 0000 0AFD         return 255;
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
; 0000 0AFE     if (input2 < 0.0)
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
; 0000 0AFF         return 0;
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
; 0000 0B00     return nearest_si(input2);
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
; 0000 0B01 }
;PCODE: $00000A61 VOL: 0
;
;unsigned char ucmax3 (float input1, float input2, float input3)
; 0000 0B04 {
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
; 0000 0B05     if ((input1 > input2) && (input1 > input3))
;PCODE: $00000A64 VOL: 0
;	input1 -> Y+8
;	input2 -> Y+4
;	input3 -> Y+0
;PCODE: $00000A65 VOL: 0
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
; 0000 0B06     {
; 0000 0B07         if (input1 > 255.0)
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
; 0000 0B08             return 255;
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
; 0000 0B09         if (input1 < 0.0)
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
; 0000 0B0A             return 0;
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
; 0000 0B0B         return nearest_si(input1);
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
; 0000 0B0C     }
; 0000 0B0D     if (input2 > input3)
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
; 0000 0B0E     {
; 0000 0B0F         if (input2 > 255.0)
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
; 0000 0B10             return 255;
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
; 0000 0B11         if (input2 < 0.0)
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
; 0000 0B12             return 0;
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
;PCODE: $00000A96 VOL: 0
; 0000 0B13         return nearest_si(input2);
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
; 0000 0B14     }
; 0000 0B15     if (input3 > 255.0)
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
; 0000 0B16         return 255;
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
; 0000 0B17     if (input3 < 0.0)
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
; 0000 0B18         return 0;
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
; 0000 0B19     return nearest_si(input3);
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
; 0000 0B1A }
;PCODE: $00000AB0 VOL: 0
;
;unsigned char ucmin3 (float input1, float input2, float input3)
; 0000 0B1D {
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
; 0000 0B1E     if ((input1 < input2) && (input1 < input3))
;PCODE: $00000AB3 VOL: 0
;	input1 -> Y+8
;	input2 -> Y+4
;	input3 -> Y+0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
; 0000 0B1F     {
; 0000 0B20         if (input1 > 255.0)
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
; 0000 0B21             return 255;
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
; 0000 0B22         if (input1 < 0.0)
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
; 0000 0B23             return 0;
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
; 0000 0B24         return nearest_si(input1);
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
; 0000 0B25     }
; 0000 0B26     if (input2 < input3)
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
; 0000 0B27     {
; 0000 0B28         if (input2 > 255.0)
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
; 0000 0B29             return 255;
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
; 0000 0B2A         if (input2 < 0.0)
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
; 0000 0B2B             return 0;
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
; 0000 0B2C         return nearest_si(input2);
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
; 0000 0B2D     }
; 0000 0B2E     if (input3 > 255.0)
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
; 0000 0B2F         return 255;
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
; 0000 0B30     if (input3 < 0.0)
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
; 0000 0B31         return 0;
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
; 0000 0B32     return nearest_si(input3);
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
; 0000 0B33 }
;PCODE: $00000AFF VOL: 0
;
;//______________________________________________________________MAIN____________________________________________________________
;void main(void)
; 0000 0B37 {
;PCODE: $00000B00 VOL: 0
; 0000 0B38 // Declare your local variables here
; 0000 0B39 unsigned char n;
; 0000 0B3A unsigned int i;
; 0000 0B3B 
; 0000 0B3C do {
;	n -> R17
;	i -> R18,R19
;PCODE: $00000B01 VOL: 0
; 0000 0B3D     // Interrupt system initialization
; 0000 0B3E     // Optimize for speed
; 0000 0B3F #pragma optsize-
; 0000 0B40     // Make sure the interrupts are disabled
; 0000 0B41 #asm("cli")
;PCODE: $00000B02 VOL: 0
	cli
;PCODE: $00000B03 VOL: 0
; 0000 0B42     // Low level interrupt: On
; 0000 0B43     // Round-robin scheduling for low level interrupt: Off
; 0000 0B44     // Medium level interrupt: On
; 0000 0B45     // High level interrupt: On
; 0000 0B46     // The interrupt vectors will be placed at the start of the Application FLASH section
; 0000 0B47     n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
; 0000 0B48     	PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
;PCODE: $00000B04 VOL: 1
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
; 0000 0B49     CCP=CCP_IOREG_gc;
;PCODE: $00000B08 VOL: 0
;PCODE: $00000B09 VOL: 0
; 0000 0B4A     PMIC.CTRL=n;
;PCODE: $00000B0A VOL: 1
;PCODE: $00000B0B VOL: 0
; 0000 0B4B     // Set the default priority for round-robin scheduling
; 0000 0B4C     PMIC.INTPRI=0x00;
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 1
; 0000 0B4D     // Restore optimization for size if needed
; 0000 0B4E #pragma optsize_default
; 0000 0B4F 
; 0000 0B50     // System clocks initialization
; 0000 0B51     system_clocks_init();
;PCODE: $00000B0E VOL: 0
; 0000 0B52 
; 0000 0B53     // Event system initialization
; 0000 0B54     event_system_init();
;PCODE: $00000B0F VOL: 0
; 0000 0B55 
; 0000 0B56     // Ports initialization
; 0000 0B57     ports_init();
;PCODE: $00000B10 VOL: 0
; 0000 0B58 
; 0000 0B59     // Virtual Ports initialization
; 0000 0B5A     vports_init();
;PCODE: $00000B11 VOL: 0
; 0000 0B5B 
; 0000 0B5C     // Timer/Counter TCC0 initialization
; 0000 0B5D     tcc0_init();
;PCODE: $00000B12 VOL: 0
; 0000 0B5E 
; 0000 0B5F     // Timer/Counter TCD0 initialization
; 0000 0B60     tcd0_init();
;PCODE: $00000B13 VOL: 0
; 0000 0B61 
; 0000 0B62     // Timer/Counter TCE0 initialization
; 0000 0B63     tce0_init();
;PCODE: $00000B14 VOL: 0
; 0000 0B64 
; 0000 0B65     // Timer/Counter TCE1 initialization
; 0000 0B66     tce1_init();
;PCODE: $00000B15 VOL: 0
; 0000 0B67 
; 0000 0B68     // Timer/Counter TCF0 initialization
; 0000 0B69     tcf0_init();
;PCODE: $00000B16 VOL: 0
; 0000 0B6A 
; 0000 0B6B     // ADCA initialization
; 0000 0B6C     adca_init((gain_index << 2) & 0b00011100);
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
; 0000 0B6D 
; 0000 0B6E     // Alphanumeric LCD initialization
; 0000 0B6F     // Connections specified in the
; 0000 0B70     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0B71     // RS - PORTE Bit 0
; 0000 0B72     // RD - PORTE Bit 1
; 0000 0B73     // EN - PORTE Bit 2
; 0000 0B74     // D4 - PORTE Bit 4
; 0000 0B75     // D5 - PORTE Bit 5
; 0000 0B76     // D6 - PORTE Bit 6
; 0000 0B77     // D7 - PORTE Bit 7
; 0000 0B78     // Characters/line: 16
; 0000 0B79     lcd_init(16);
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
; 0000 0B7A     delay_ms(500);
;PCODE: $00000B1E VOL: 0
;PCODE: $00000B1F VOL: 0
; 0000 0B7B     lcd_clear();
;PCODE: $00000B20 VOL: 0
; 0000 0B7C     lcd_putsf("MzZ");
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
; 0000 0B7D     delay_ms(1000);
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
; 0000 0B7E     lcd_clear();
;PCODE: $00000B26 VOL: 0
; 0000 0B7F 
; 0000 0B80     TCF0.CNT = 0x0000;
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 1
; 0000 0B81     TCF0.INTFLAGS = 0x01;
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 1
; 0000 0B82     TCF0.CTRLA = 0x00;
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 1
; 0000 0B83 
; 0000 0B84     menu_display_calib();
;PCODE: $00000B2D VOL: 0
; 0000 0B85 
; 0000 0B86 } while(0);
;PCODE: $00000B2E VOL: 0
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
; 0000 0B87 
; 0000 0B88 // Globally enable interrupts
; 0000 0B89 #asm("sei")
;PCODE: $00000B32 VOL: 0
	sei
;PCODE: $00000B33 VOL: 0
; 0000 0B8A 
; 0000 0B8B 
; 0000 0B8C //    while (current_menu_state == menu_state_calib);
; 0000 0B8D //    lcd_clear();
; 0000 0B8E //    for (i = 0; i < 256; i++)
; 0000 0B8F //    {
; 0000 0B90 //        dac_inputs_min[i] = 31*i/32;
; 0000 0B91 //        dac_inputs_max[i] = 31*i/32 + 8;
; 0000 0B92 //    }
; 0000 0B93 //
; 0000 0B94 //    while (1);
; 0000 0B95     while (1)
;PCODE: $00000B34 VOL: 0
; 0000 0B96     {
; 0000 0B97         // Place your code here
; 0000 0B98         while (sampling_state != SAMPLING_STATE_FFT);
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
; 0000 0B99         rearrange_adc_data();
;PCODE: $00000B3B VOL: 0
; 0000 0B9A         cast_to_complex();
;PCODE: $00000B3C VOL: 0
; 0000 0B9B         fft();
;PCODE: $00000B3D VOL: 0
; 0000 0B9C         abs_fft();
;PCODE: $00000B3E VOL: 0
; 0000 0B9D         convert_for_dac();
;PCODE: $00000B3F VOL: 0
; 0000 0B9E         sampling_state = SAMPLING_STATE_UPDATING;
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
; 0000 0B9F         dac_inputs_max[255] = ucmax(fft_adc.fft_abs[0],(fft_adc.fft_abs[0] + fft_adc.fft_abs[1])*0.5);
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
; 0000 0BA0         dac_inputs_min[255] = ucmin(fft_adc.fft_abs[0],(fft_adc.fft_abs[0] + fft_adc.fft_abs[1])*0.5);
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
; 0000 0BA1         for (i = 1; i < ((fft_N >> 1) - 1); i++)
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
; 0000 0BA2         {
; 0000 0BA3             dac_inputs_max[((fft_N >> 1) - 1) - i] = ucmax3(fft_adc.fft_abs[i],(fft_adc.fft_abs[i] + fft_adc.fft_abs[i + 1])*0.5,
; 0000 0BA4                 (fft_adc.fft_abs[i] + fft_adc.fft_abs[i - 1])*0.5);
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
; 0000 0BA5             dac_inputs_min[((fft_N >> 1) - 1) - i] = ucmin3(fft_adc.fft_abs[i],(fft_adc.fft_abs[i] + fft_adc.fft_abs[i + 1])*0.5,
; 0000 0BA6                 (fft_adc.fft_abs[i] + fft_adc.fft_abs[i - 1])*0.5);
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
; 0000 0BA7         }
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
; 0000 0BA8         dac_inputs_max[0] = ucmax(fft_adc.fft_abs[255],(fft_adc.fft_abs[255] + fft_adc.fft_abs[254])*0.5);
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
; 0000 0BA9         dac_inputs_min[0] = ucmin(fft_adc.fft_abs[255],(fft_adc.fft_abs[255] + fft_adc.fft_abs[254])*0.5);
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
; 0000 0BAA         while (1)
;PCODE: $00000BDE VOL: 0
; 0000 0BAB         sampling_state = SAMPLING_STATE_IDLE;
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
; 0000 0BAC }
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
; 0000 0BAD }
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
